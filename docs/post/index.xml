<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sophonの博客</title>
    <link>https://example.com/post/</link>
    <description>Recent content in Posts on Sophonの博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 02 Jan 2021 09:13:28 +0000</lastBuildDate><atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「SCOI2009」windy 数</title>
      <link>https://example.com/post/scoi2009windy-%E6%95%B0/</link>
      <pubDate>Sat, 02 Jan 2021 09:13:28 +0000</pubDate>
      
      <guid>https://example.com/post/scoi2009windy-%E6%95%B0/</guid>
      <description>题意简述 不含前导零且相邻两个数字之差至少为 $2$ 的正整数被称为 windy 数。windy 想知道，在 $a$ 和 $b$ 之间，包括 $a$ 和 $b$ ，总共有多少个 windy 数？
题目分析 数位DP模板题
定义状态 $dp_{i, j}$ 为长度为 $i$ 的windy数中，最高位为 $j$ 的数的数目。
状态转移方程也很容易得到，可以直接从前一位转移过来：
$$dp_{i, j} = \sum dp_{i - 1, k} (|j - k| \geq 2)$$
主要的难点是在计算 $1$ 到 $n$ 之间的 windy 数，这可以分为几个步骤处理。
第一步，求出所有长度小于等于 $len - 1$ （$len$ 为 $n$ 的长度）的，以 $1$ ~ $9$ 为最高位的 windy 数的总数。
第二步，求出所有长度为 $len$，最高位小于 $n$ 的最高位的 windy 数的总数。
第三步，求出所有长度为 $len$，最高位等于 $n$ 的最高位的 windy 数的总数。这一步是最难想的，需要从第二位开始，依次枚举每一位，并累加所有以与上一位的差小于 $2$ 的数为最高位的 windy 数的总数。（前几位之前已经补足。）</description>
    </item>
    
    <item>
      <title>题解「CF1200E」Compress Words</title>
      <link>https://example.com/post/%E9%A2%98%E8%A7%A3cf1200ecompress-words/</link>
      <pubDate>Fri, 01 Jan 2021 23:53:05 +0000</pubDate>
      
      <guid>https://example.com/post/%E9%A2%98%E8%A7%A3cf1200ecompress-words/</guid>
      <description>题意简述   给定 $n$ 个单词，将这 $n$ 个单词从前往后拼接在一起，若相邻两个单词的后缀和前缀相同则将其重合在一起。
  如输入 sample please ease in out，sample 与 please 拼接得 samplease，samplease 与 ease 拼接仍得 samplease，最终得 sampleaseinout
  题目分析 题目的关键在于求出两个字符串之间的最长公共部分，即相等的前缀与后缀。这很容易让人联想到 KMP 的 $next$ 数组，它的定义是一个字符串的前缀的最长的相同的前缀与后缀的长度，$next[len - 1]$ 的定义就是这个字符串的最长的相同的前缀与后缀的长度。
因此，对于字符串 $s1$ 和 $s2$，我们只需要将 $s2$ 拼接在 $s1$ 前面，例如将 sample 与 please 拼接为 pleasesample，再求出这个字符串的 $next[len - 1]$ 等于 $2$，就可以简单地得到公共部分为 ple，再从 $2$ 开始截取 please 的后半部分 ease 拼接到 sample 后面即可。
对于 $n$ 个字符串，则应该按照上面的方法依次拼接。
P.S. 一个优化：因为两个字符串之间的最长公共部分的长度显然不可能大于其中任意一个字符串的长度，所以在一开始拼接时，只需要求出两个字符串中较短的的长度 $l$，将第一个字符串的后 $l$ 个字符拼接到第二个字符串后面，再求 $next[len - 1]$ 的值。</description>
    </item>
    
    <item>
      <title>题解「CF161D」Distance in Tree</title>
      <link>https://example.com/post/%E9%A2%98%E8%A7%A3cf161ddistance-in-tree/</link>
      <pubDate>Fri, 01 Jan 2021 20:01:39 +0000</pubDate>
      
      <guid>https://example.com/post/%E9%A2%98%E8%A7%A3cf161ddistance-in-tree/</guid>
      <description>题意简述 给定一颗$N$个节点的树，求树上长度为$K$的路径的数量
输入 第一行两个数字$N$，$K$，如题意
接下来的$N−1$行中，每行两个整数$u,v$表示一条树边$(u,v)$
输出 一个整数$ans$，如题意
数据范围 $1 \leq N \leq 50000$
$1 \leq K \leq 500$
题目分析 虽然此题可以看出是个点分治模板，但由于$K$的范围较小（小于等于$500$），所以树形DP也可以解决这道题
定义状态$f_{u,i}$为从$u$开始的路径中长度为$i$的路径的数量，可以很容易得出状态转移方程
$$f_{u, i} = \sum_{v \in son_u} f_{v, i - 1}$$
回到题目本身，题目中要求我们找出所有长度为$K$的路径
以$u$为根节点考虑，可以将所有的路径分为两种：经过点$u$的和不经过点$u$的
对于后者，可以直接递归处理；对于前者，我们可以以点$u$将其分为两条路径，两条路径的长度和为$K$。所以，根据乘法原理，我们只需累加f[v][i] * f[u][k - i - 1]即可。
另外，累加答案必须在更新$f_{u, i}$之前，因为在更新之前，$f_{u, i}$是从点$u$开始，不经过点$v$的长度为$i$的路径数量，乘以$f_{u, K - i - 1}$就可以得到经过$u, v$的长度为$K$的路径数量。但如果先更新$f_{u, i}$，则$f_{u, i}$是从点$u$开始，经过点$v$和其他子节点的长度为$i$的路径数量，会出现重复：即一条路径从$v$走到$u$，又走回$v$的“重复”现象
代码 #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; const int MAXN = 50000 + 5; const int MAXK = 500 + 5; vector&amp;lt;int&amp;gt; G[MAXN]; int f[MAXN][MAXK]; int n, k; long long ans; void dp(int u, int par) { f[u][0] = 1; for(int i = 0; i &amp;lt; G[u].</description>
    </item>
    
    <item>
      <title>【TJOI2013】单词-题解</title>
      <link>https://example.com/post/tjoi2013%E5%8D%95%E8%AF%8D-%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Fri, 01 Jan 2021 13:08:24 +0000</pubDate>
      
      <guid>https://example.com/post/tjoi2013%E5%8D%95%E8%AF%8D-%E9%A2%98%E8%A7%A3/</guid>
      <description>题意简述 给出$n$个单词，统计每个单词在全体单词（包括自身）中的出现次数
题目分析 对多个模式串进行匹配，求每个模式串的出现次数，显然是AC自动机模版题
本题与模版的区别在于，本题中单词可能会有重复，因此要用一个$cnt$数组记录$Trie$树上每个节点被覆盖了几次，再用一个$vis$数组记录当前节点是否已经被累加过了
如果当前节点$i$还没有被累加过（$vis_i = false$），就将它往上能跳到的节点都加上$cnt_i$，扫完后再将$vis_i$变为$true$
代码 #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; const int MAXN = 1000000 + 5; const int MAXM = 200 + 5; string s[MAXM]; bool vis[MAXN]; int t[MAXN][26], sum[MAXN], cnt[MAXN], ed[MAXN], ans[MAXN]; int fail[MAXN]; int tot; int insert(string&amp;amp; s) { int p = 0; for(int i = 0; i &amp;lt; s.length(); i++) { if(t[p][s[i] - &amp;#39;a&amp;#39;] == 0) { t[p][s[i] - &amp;#39;a&amp;#39;] = ++tot; } p = t[p][s[i] - &amp;#39;a&amp;#39;]; cnt[p]++; } return p; } void getFail() { queue&amp;lt;int&amp;gt; q; for(int i = 0; i &amp;lt; 26; i++) { if(t[0][i]) { q.</description>
    </item>
    
    <item>
      <title>AC自动机学习笔记</title>
      <link>https://example.com/post/ac%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 01 Jan 2021 00:24:39 +0000</pubDate>
      
      <guid>https://example.com/post/ac%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>再不更新这里都长草了
前置知识  KMP Trie树  前言 AC自动机是一个字符串匹配算法，与KMP的区别在于，AC自动机可以用$O(\sum |s_i| + |S|)$的复杂度在文本串中同时查找多个模式串，例如这道题
对于初学者 就是我 而言，可以简单地将AC自动机理解为KMP + Trie树，整个算法分为三步：
 将所有的模式串建成一颗Trie树 求出Trie树上每一个节点的失配指针（fail）（类似KMP的next） 将文本串在Trie树上进行匹配  算法过程 建立Trie 这一步和普通的字典树一样，不解释
void insert(string&amp;amp; s) { int p = 0; for(int i = 0; i &amp;lt; s.length(); i++) { if(t[p][s[i] - &amp;#39;a&amp;#39;] == 0) { t[p][s[i] - &amp;#39;a&amp;#39;] = ++tot; } p = t[p][s[i] - &amp;#39;a&amp;#39;]; } num[p]++; } 求失配指针 $fail_u$的定义为，Tire树内所有字符串的所有前缀中，后缀匹配长度最大的的位置；如下图中，$fail_i = j$
（图中不同颜色的边代表字符）
如图，节点$i$与节点$j$的后缀匹配最长，所以$fail_i = j$
如图，$fail_i = j$，则$i$的粉色子节点（此处用颜色表示字符）必然也与$j$的粉色子节点有最长的后缀，因此该子节点的$fail$指针就是$k$</description>
    </item>
    
    <item>
      <title>【开新坑】《南极狂想曲》</title>
      <link>https://example.com/post/%E5%BC%80%E6%96%B0%E5%9D%91%E5%8D%97%E6%9E%81%E7%8B%82%E6%83%B3%E6%9B%B2/</link>
      <pubDate>Wed, 12 Aug 2020 16:34:58 +0000</pubDate>
      
      <guid>https://example.com/post/%E5%BC%80%E6%96%B0%E5%9D%91%E5%8D%97%E6%9E%81%E7%8B%82%E6%83%B3%E6%9B%B2/</guid>
      <description>郑重声明：本作品为奇幻小说，不涉及也不参与任何现实中的意识形态纠纷。对于作品中的任何魔怔设定，本人一概不负任何责任。
起源 这个系列来源于@Schwarzkopf_Henkal 的脑洞：
然后我和SH就在犇犇里有一句没一句地语C
简介 借助高度发达的魔法技术，人类征服了地球上最后一块丰饶的大陆——南极。然而，大量的资源从冰盖中被开采出来后，只是让原本就十分尖锐的社会矛盾雪上加霜。就在这时，一具被封冻在南极冰盖中70年的躯体引起了全世界的注意……
为了解决问题，从左翼到右翼的所有人都在用魔法实践自己的观点。随意识形态的激烈交锋而来的，是全世界范围的激烈战争，战火从南极，南美洲，北美洲，东亚，西伯利亚一直烧到欧洲。进步同盟与联合国的疆界每天都在反复进退，没人知道这一切何时才会结束……
人物设定 Schwarzkopf Henkal 姓名：Schwarzkopf Henkal
昵称：Henkal
工作单位：南极国际科学考察团 -&amp;gt; 南苏维埃共和国主席团
现居地点：阿蒙森-斯科特永久中立自治区 -&amp;gt; 南极苏维埃共和国
政治立场：马克思列宁主义
爱好：甜点，意大利面，哲学，共产主义
“Henkal，你的考察报告怎么还没写完！”——Tomoko
经常在工作时摸鱼的大姐姐，在被问起「为什么要到南极来工作」时，队友们纷纷回答“是为了将自己的青春和生命献给这无尽的雪原，谱写人类探索未知的诗歌”，只有她回答“感觉在南极工作很有趣的样子。”
对待意识形态的问题特别严肃，不喜欢别人把政治当作升官发财的渠道；有时会看一些关于哲学的书，经常沉浸在关于世界观的各种讨论中。
以下是在南极海边散步时，Tomoko拍的一张照片：
Nanami Tomoko 姓名：Nanami Tomoko
昵称：智子
工作单位：南极国际科学考察团 -&amp;gt; 南苏维埃共和国主席团
现居地点：阿蒙森-斯科特永久中立自治区 -&amp;gt; 南极苏维埃共和国
政治立场：正统马克思主义
爱好：冰淇淋，计算机，历史书，共产主义
“Tomoko你到底打算什么时候还书！”——Henkal
在人前大大咧咧但是又不善言辞的小姐姐，有时候为了缓解气氛而开的玩笑经常时气氛更冷了。经常给自己身边的人“传教”但总是受到拒绝。在被问起「为什么要到南极来工作」时回答“啊，反正这份工作也不需要经常处理各种人情世故，再加上自己也很喜欢就来了。”
经常表现得特立独行，在使用计算机时经常叨念些莫名其妙的名词并解释「这样能更好的保护隐私」，坚持不用别人常用的社交软件，这使得Tomoko与朋友通讯时经常刚遇到麻烦。由于太过专注于技术，又是对于自己身边的问题浑然不觉。（Henkal借给Tomoko的《路易·波拿巴的雾月十八日》已经两个月了，如果不是Henkal偶然到Tomoko房间来，可能再过两个月也还不回去。）
比较关注历史和平权主义，能够和不同思想的人乃至自由主义者（？）讨论，但绝对不能容忍别人贬低或侮辱自己热爱的事物。但不管你持有什么观点，和她讨论历史的话她都会很欢迎的。
以下为Tomoko在逛街时摆拍的一张照片
Charleyxiao 姓名：Charleyxiao
昵称：白鹅（实际上它是一只企鹅）
工作单位：南极苏维埃共和国武装力量
现居地点：阿蒙森-斯科特永久中立自治区 -&amp;gt; 南极苏维埃共和国
政治立场：托洛茨基主义
爱好：发明讽刺的意识形态以讽刺其他意识形态（？）
“政委，人类破坏分子在冰盖下面安了水雷，刚刚巡逻的时候有几个水兵发现了！”
“什么？！让我去看看！”
在南极苏维埃需要援助时，白鹅总是走在最前线。白鹅是托洛茨基企鹅大军的一个小政委，负责给企鹅作思想工作，拨乱反正。对于企鹅军内的修正主义，以及对任何人的个人崇拜，它都十分厌恶。
白鹅最开始其实是一个无政府主义者，这可能与它曾经被禁锢在阿根廷的动物园里的经历有一定联系。但是核电站事故之后，它了解到了托洛茨基主义，并对这种有组织的反权威的思想有了浓厚的兴趣。因此它加入了托洛茨基的企鹅大军军队。在南苏维埃共和国主席团上，白鹅认识了Schwarzkopf Henkal和Nanami Tomoko，虽然他们都是人类，但是白鹅还是经常和他们一起讨论政治。一般来说，如果不惹怒白鹅的话，它能和任何意识形态的人有好的交谈，甚至是超革命主义者也是一样。
白鹅发明了一些魔怔的意识形态，比如新环形主义、双环形调和主义、星际不断革命论。军队里学历最高的企鹅也无法理解这些东西，但是白鹅还是乐在其中。当白鹅自称中心主义者的时候，你知道它实际上是在讽刺中心主义，它称这是通过对现实的讽刺发现自己是在讽刺这种讽刺，以让他人知道这是在讽刺所谓讽刺的讽刺，简而言之，就是魔怔。
白鹅不喜欢拍照，它在自己的魔怔理论中提到拍照的本质是一种人类中心主义的体现，所以这里只找到它参军时在某个旗帜下拍的照片：
布列斯特·奥克佳布里斯卡娅 姓名：布列斯特·奥克佳布里斯卡娅
昵称：布列斯特（Brest）
工作单位：苏维埃社会主义共和国联盟武装力量 -&amp;gt; 新苏维埃社会主义共和国联盟武装力量
现居地点：斯摩棱斯克 -&amp;gt; 斯大林格勒</description>
    </item>
    
    <item>
      <title>1977年欧洲局势（小说世界线）</title>
      <link>https://example.com/post/1977%E5%B9%B4%E6%AC%A7%E6%B4%B2%E5%B1%80%E5%8A%BF%E5%B0%8F%E8%AF%B4%E4%B8%96%E7%95%8C%E7%BA%BF/</link>
      <pubDate>Wed, 12 Aug 2020 16:29:58 +0000</pubDate>
      
      <guid>https://example.com/post/1977%E5%B9%B4%E6%AC%A7%E6%B4%B2%E5%B1%80%E5%8A%BF%E5%B0%8F%E8%AF%B4%E4%B8%96%E7%95%8C%E7%BA%BF/</guid>
      <description>图片加载可能要等一会……
图片很大有3.5M，大家耐心点
 自1453年东罗马帝国灭亡后，君士坦丁堡，这座城中之城再度易手。
在走上未曾设想的道路后，充满宗教热忱的罗斯人高呼着“恢复东罗马帝国荣光！”的口号，如潮水般涌向了西亚，企图收复拜占庭时代的五大牧首区——罗马，君士坦丁堡，安条克，耶路撒冷，亚历山大港
战姬骑士团首先将矛头对准了土耳其。那些带有“上帝赐予的力量”，或者说是“玛丽亚在人间的代言者”的姑娘们，挥舞着十字剑和战锤冲过多瑙河，踏上了巴尔干半岛的东色雷斯地区。经过三个星期的“圣战”，被凯末尔改为博物馆的圣索菲亚大教堂重新成为一座东正教的教堂。假如不是宗教狂热让她们不敢破坏这座神圣的城市，君士坦丁堡战役的持续时间可能还会更短。
攻占君士坦丁堡后，罗斯人们作出了更让其他国际震惊与困惑的举动：进攻叙利亚。
她们没有理会仍然盘踞在安纳托利亚半岛东北部的土耳其残余势力，挥师南下，直取古城安条克（今称安塔基亚），随后又对叙利亚发起猛攻。
 “也就是说……”穿着礼服的黑发少女眨了眨眼睛。
“那些疯子的行动根本就没有什么原因”，秘书耸了耸肩，“他们根本就不是出于什么政治或经济上的目的，纯粹就是对东正教的狂热，就像近千年前那些西欧的十字军一样，疯狂地向「圣城」发起猛攻，只不过罗斯人成功了。”
”所以她们又在筹划进攻哪里？“
”我想是安塔基亚，一座除了大理石什么都不产的城市。这是拜占庭帝国的牧首区之一。“
”你是说东罗马帝国吧？“
”就说拜占庭帝国，总统小姐。神圣罗马帝国的人就是这么叫的，当然那是因为那些日耳曼人想给自己弄个威严一点的称呼，但至少我们同样在嘲讽他们自封罗马的举动。事实上，如果非要说谁是罗马，前些日子在巴尔干半岛上大杀四方的意大利人还更有合法性，起码那些意大利人占据着罗马城。“
总统对此似乎不以为然：”拿破仑战争结束之后就再也没有哪个国家像意大利这样野蛮地吞并其他国家的领土了，意大利人不学着希腊人成立阿尔巴尼亚联邦，而是将其直接纳为自己的领土。在别的地方这么干也就罢了，在有火药桶之称的巴尔干地区这么干，我很佩服他们的勇气。更别提这帮家伙居然在南斯拉夫和阿尔巴尼亚地区陷入苦战，搞定的区域只有亚得里亚海沿岸。如果不是罗斯人在东线的进攻重创了南斯拉夫，这帮家伙十有八九会陷入二战时一样的境地。咳，还有那个难以理解的‘塞浦路斯分治’，我百思不得其解他们是出于什么原因和罗斯人商议把一个小岛拆成三块。“
“这已经不是我们有必要担忧的问题了，总统小姐。接下来我有两个消息，都是关于那些罗斯人的。”
“你是不是还想说，一个是好消息一个是坏消息？”
“从某种意义上来说，两个消息都是既不好也不坏。第一个消息是，CIA传来情报，那些罗斯人貌似是想占领耶路撒冷，不过只是装装样子而已，他们的领导人绝对没疯，不至于干蠢事。”
“这种由狂信徒统治的国家必然会有诸多问题，极度不理智的行为就是其一。例如费好大功夫，与好几个国家为敌，就为了攻打一个除了文化之外毫无意义的城市。”总统的语调中带着明显的嘲讽，“毕竟，连以色列和中东国家都没有在耶路撒冷发生激战。那么，另一个消息是什么？”
“额……”秘书犹豫了一下，“罗斯向我们提出了申请……”
“什么申请？”
“他们说，既然环太平洋联盟是维护世界和平的组织，罗斯共和国作为世界大国自然也有维护世界和平的义务，换句话说……罗斯共和国申请加入环太平洋联盟。”
 罗斯共和国方面的传单
就在昨天，罗斯外交部向PRA（Pacific Rim Alliance，环太平洋联盟）提交了加入申请，但这一申请旋即遭到了回绝。
PRA是东亚战争结束后，以北大西洋公约为基础，美国主导组建的军事一体化联盟组织。建立时，PRA宣称其宗旨为“维护世界和平”，但PRA具体是怎么做的？看一下地图就能明白，PRA的成员国除了美国，韩国，日本，菲律宾，等太平洋沿岸国家外，还包括英国，法国，西班牙，葡萄牙，西德，冰岛，瑞典，挪威，芬兰，丹麦等大西洋沿岸国家，甚至包括意大利，希腊等地中海沿岸国家，这哪里是“环太平洋联盟”？倒不如说是“环罗斯联盟（RRA）”更贴切一点。
如果PRA真的如他们所声称的那样，是维护世界和平的组织，那么他们为何会拒绝罗斯的加入？这只说明一个问题，PRA根本就不是什么维护世界和平的组织，而是一个世界性的“反罗斯联盟”。这次事件让全世界都看请了PRA的丑恶嘴脸，更让我们明白，只有通过不断的战斗，罗斯民族才有未来！
为了罗斯民族的荣耀！
 《沙皇格勒是罗斯自古以来不可分割的一部分》
罗斯至今为止已经有2700年源远流长的历史，从罗穆路斯建立罗马城开始，罗斯民族的血脉就在欧罗巴大地上流传。沙皇格勒[1]自从306年建立以来，就是罗斯民族的土地。早在罗马共和国时期，罗斯民族就生活在沙皇格勒，在后来的罗马帝国历史中，沙皇格勒都是罗斯民族最重要的城市之一。这证实了沙皇格勒是罗斯自古以来不可分割的一部分，也驳回了外国势力关于沙皇格勒归属的谬论。
直到1435年，沙皇格勒被突厥人攻占，从此，“城中之城”就一直沦落在异族手中，直到1977年罗斯军队收复沙皇格勒，“城中之城”才重新回归罗斯母亲的怀抱。
对于任何企图分裂罗斯领土的行为，罗斯都会对其进行最严厉的谴责，这是对罗斯民族尊严的挑衅。尤其是近日大批沙皇格勒的流氓无产者受到外国势力挑拨，公然打出要求突厥人统治沙皇格勒的口号。这些人要么是愚蠢到认为在突厥人的暴政下沙皇格勒的人会生活得更好，要么就是坏到向外国势力出卖了自己的祖国。
在上帝的指引下，罗斯民族将捍卫自己的所有合法权利。我们不畏惧任何战争，正如凯撒所说：
“我来，我见，我征服。（Veni, vidi, vici.）”
[1]：斯拉夫人将伊斯坦布尔（凯末尔推行世俗化之前称君士坦丁堡）称为沙皇格勒（Царьград）
 1977年局势
东亚战争开始时，RPK集团并未停止动作，瓦莱里娅动用经济手段，将联盟解散后陷入混乱中的东欧各国的经济进行整合，成立了“东欧经济合作组织”，甚至创造出“多瑙河联合体”这个莫名其妙的政权。在欧洲的社会主义阵营中，几乎只有南斯拉夫一国没有收到这场超级风波的影响。一夜之间，整个东欧都被迫走上与罗斯共和国相同的道路。对于这场将整个社会主义阵营在短时间内瞬间击垮的事变，未来的历史学家们给予它如下称呼：「东欧剧变」
随后，罗斯人再度发起侵略战争，她们再度越过多瑙河，以剑与火的游行横扫南斯拉夫东部。南斯拉夫原本就因为东欧剧变而遭受严重损失，面对罗斯的入侵更加无力。最后，是罗斯的魔法少女们停下脚步竟然是这几个原因：
1.以瓦莱里娅为首的RPK集团认为只要建立以塞尔维亚为基础的傀儡政权就足够了，继续扩张只会带来不必要的麻烦和损失。
2.“科索沃抵抗军”的坚持反抗让罗斯人的损失不断增加。
3.意大利与希腊在巴尔干半岛的扩张。罗斯共和国还没有做好与PRA（环太平洋联盟）发生正面冲突的准备，不得不停止军事扩张。
但这决不意味着铁托和他的南斯拉夫的噩梦停止了。相反，意大利军队向东开进，先后占领了斯洛文尼亚，克罗地亚，波斯尼亚和黑塞哥维那乃至塞尔维亚的部分疆域，直接与罗斯的傀儡塞尔维亚政权接壤，剑锋直指萨拉热窝。但同样为了避免与罗斯的冲突，意大利军队又向南进发，占领了黑山和阿尔巴尼亚的部分领土并将南斯拉夫和阿尔巴尼亚变成内陆国，统治整个亚得里亚海。阿尔巴尼亚，这个自称为“世界上第一个无神论国家”和“世界上唯一的社会主义国家”的国度，最终还是在与帝国主义的斗争中彻底落败。
与此同时，希腊也在尝试进行着扩张。与意大利不同，他们只是谨慎地占领了阿尔巴尼亚的西南部，并扶植了“阿尔巴尼亚联邦”这一傀儡政权。
随后，1977年最滑稽的一场闹剧开始了。事情的缘由只是希腊右翼在塞浦路斯共和国发动政变，早就就凯觎此地的罗斯立即以协调为由出兵，意大利也因此卷入。由于环太平洋联盟的特殊性（对任意成员国宣战等于对全体成员国宣战），罗斯共和国一直没有以官方身份宣布军事干涉塞浦路斯事件。在经过一场混乱的冲突后，联合国才慢吞吞地宣布介入此事并组织和谈。最终结果是，希腊占有塞浦路斯岛西南部，意大利占有塞浦路斯岛东南部，“北塞浦路斯共和国”（一建国就加入了东欧经济合作组织）占有塞浦路斯岛的北部。
中东方向，罗斯人占领叙利亚后停止了扩张。直接与全体阿拉伯国家敌对的代价不是在东亚陷入战争泥潭的罗斯能承受的，这一点罗斯的决策层看的很清楚。而且占领君士坦丁堡也只是“复兴罗斯民族”计划的一环而已，列昂尼德和瓦莱里娅不是P社玩家，“东罗马帝国”只是临时般过来作为法理依据而已，除了在论证时没人会把它当回事。</description>
    </item>
    
    <item>
      <title>【架空历史】【短篇】伏尔加格勒的夜色</title>
      <link>https://example.com/post/%E6%9E%B6%E7%A9%BA%E5%8E%86%E5%8F%B2%E7%9F%AD%E7%AF%87%E4%BC%8F%E5%B0%94%E5%8A%A0%E6%A0%BC%E5%8B%92%E7%9A%84%E5%A4%9C%E8%89%B2/</link>
      <pubDate>Mon, 10 Aug 2020 23:28:39 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%9E%B6%E7%A9%BA%E5%8E%86%E5%8F%B2%E7%9F%AD%E7%AF%87%E4%BC%8F%E5%B0%94%E5%8A%A0%E6%A0%BC%E5%8B%92%E7%9A%84%E5%A4%9C%E8%89%B2/</guid>
      <description>1971年7月，伏尔加格勒
夜深了。
伏尔加格勒的月光从未如此清冷，仿佛坟墓中散发出的荧光，喃喃着不知是谁的坟墓主人的姓名。星星死气沉沉地排列在月亮周围，如同穿着黑衣一言不发的随从。假若一个虔诚的基督教徒同时看到天上与地上的情景，一定会想起《圣经》中关于审判日的描写，月亮与星星是于天中排列的天使，将要审判世间的一切罪恶。
街道上传来人们的尖叫与呐喊，时不时还闪烁着几点火光。有人在奔跑，有人在哭号，有人在喊叫试图维持秩序，也有人带着颤抖的声音怒吼着，但随即嘎然而止。
但最后，都被轰鸣的机械碰撞声所取代。
——这就是年仅六岁的欧若拉对那天晚上的全部记忆。
外面嘈杂的声音持续了很长时间，欧若拉好奇地忍不住爬到窗台上去看，但立马就被父亲拽了下来，严厉地小声了呵斥一句，但父亲的神色立即又被一种被压抑着的悲哀所取代。在困惑与茫然中，欧若拉懵懵懂懂地被父亲哄到卧室里。
“你就呆在这里，赶快睡觉，不管听到什么都不要喊叫。外面有人撞车了，很快就会没事的。”
父亲用严肃的语气向她解释。年幼的欧若拉并没有意识到，父亲额头上渗出的汗珠已经出卖了他此刻的心情，对她而言，父亲是撑起天空的支柱一样的存在，是绝对正确、任何问题都能解决的的。
就在欧若拉期盼的目光中，父亲一言不发地走出了房间，然后轻轻地关上了房门。
一转身，安德烈的脸上立刻阴云密布。他努力调整着自己的呼吸，犹豫了一下，将手伸向电话，随手拨了一个早已烂熟于心的电话号码。糟糕！他慌乱地想道。但此时他已经没有回头路了，在十秒钟前还可以立即销毁全部记录，假装自己与动乱毫无关系，但现在这种机会已经离他而去了。他甚至不能挂断电话——这会立即引起怀疑。因为动乱而焦头烂额的罗斯共和国虽然不能二十四小时监控全部官僚系统的电话，但一名从主教的家中发出如此奇怪的通讯必然会得到“重点关照”。相反，就这样拨通的电话会因为属于“普通工作交流”而不进行备份。
按下按钮，他心中又涌起一阵恐慌。尽管安德烈竭力安慰自己“再也不会有比这更差的结果了”，双手却不住地颤抖着，仿佛在嘲笑他的愚蠢与不自量力。电话几秒钟后就接通了——显然对方也正绷紧着神经，这一点从对方同样不怎么冷静的音调就能听出来。
“安德烈？你那边还好吧？”
“不好，空降兵已经开始行动了，但我现在所在的街区属于政府用地，目前还没有受到波及，不过过不了多久肯定会被调查的。怎么，你们那边的行动没有成功吗？”
电话的另一边似乎苦笑了一下，干涩地说：
“你现在只要看看周围就应该知道了，亚历山大提出的倡议被否决了，现在对直接镇压提出反对的人都自身难保。老人们似乎还在争论，但我觉得他们最终还是会支持这场运动的，问题是民众不这么认为……他们根本就不明白自己的处境到底是谁造成的。”
“永远不要觉得民众愚昧，他们有自己的立场。”安德烈的声音重新变得冷静，更像一位战士。
“啧啧……总而言之，你那边可能还没出现，但现在民众已经开始用抢来的武器对抗军队，而委员会则批准军队用实弹镇压……事态已经升级为内战了，对于参与群众的称呼也改成了‘叛军’……我们全都被摆了一道。”
“什么！”啪地一声响，终于失去所有希望的安德烈瘫倒在沙发上，但他的手里却仍然死死攥着电话，仿佛可以给他带来一线生机，“上层的动向呢？老人们怎么说的？复兴派都支持镇压吗？”
“同志……我知道的都跟你说了，现在高层还没来得及表态，但他们无疑都不会容忍在伏尔加格勒发生内战……而孤立无援的群众们，最好的下场也不过是像巴黎公社一样，将死神的降临推迟几个星期……我们也该寻求自保了，再见。”
似乎是察觉到对方的心理，又补充了一句：
“有新动向我会随时通知你，同志。”
不用了。这是安德烈此时的唯一想法，他僵硬地转动着收音机的旋钮，调到了罗斯共和国的官方声明：“卫戍部队已经彻底封锁伏尔加格勒……严重缺少重武器的叛军只能用公交车与汽车来阻挡军队的装甲力量，但这甚至不能延迟装甲部队完成任务的时间……极少数叛军残余还被包围在部分区域负隅顽抗，但随着装甲部队的扫荡已经无法逃脱被歼灭的命运……”
收音机里慷慨激昂的声音持续了整整十五分钟，与之相对应的是外面仍然轰鸣着的金属碰撞声，安德烈从未感觉自己如此渺小。仿佛是看到他的绝望还不足以将它击垮，电话铃声又响了起来，在安德烈听来却像死神的脚步，但他还是无力地拿起了电话：
“安德烈……现在列昂尼德已经争取到了绝大多数‘复兴派’力量的支持，而老人们也支持采取强硬政策，一切都结束了，运气好的话我们还能继续原来的生活，运气不好就可以做好准备了。”
电话中的声音嘎然而止。
安德烈如同坠入深渊。
尘封的回忆开始在他的脑海中浮现：他想起自己在革命时呱呱坠地，想起青年时经历的工业化与集体农庄的新闻，想起在伟大的卫国战争时他和其他同志一样在枪林弹雨中冲锋，想起“秘密报告”后的迷茫、质疑与骚乱，然后是“复兴罗斯”……
收音机还在喋喋不休地吵着，但内容已经换成了经济；“委员会总书记列昂尼德发表讲话，强调经济改革绝不能停息，复兴罗斯的道路仍然艰难……经济增长较去年出现突破性发展……已与多家外国企业达成合作，全力推进多元化，市场化，国际化……抛弃原有的僵化思维，引进国外先进经济制度……莫斯科大牧首发言祝贺……”
他目睹了自己的祖国从废墟中升起，走入壮年，在烈焰中浴血奋战，经历混乱与迷茫，现在则看着自己的祖国终于灰飞烟灭。收音机里歌颂着“祖国”的富强，但他知道，从今夜起，这就不再是他的祖国了。从1917年的彼得格勒，半个世纪，对于一个国家而言太短。
充斥着子弹与烈焰的城市中，谁也没有注意到，在一座防守严密的建筑群中，一个人跪坐在打扫得一尘不染得地板上，喉咙里发不出声音，那是在为死者默哀，为名存实亡的祖国默哀。
与此同时，千里之外的沈阳正电闪雷鸣，那是暴风雨的前奏。</description>
    </item>
    
    <item>
      <title>Hexo踩坑记录（一）</title>
      <link>https://example.com/post/hexo%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%E4%B8%80/</link>
      <pubDate>Mon, 10 Aug 2020 15:39:53 +0000</pubDate>
      
      <guid>https://example.com/post/hexo%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%E4%B8%80/</guid>
      <description>最近几天翻找自己的学习笔记时，忽然发现自己的Hexo博客已经长了几个月的草，于是一时兴起又更新了一下Hexo博客，但在构建博客时出现了问题：
Hexo与Node.js的兼容性 mike@MacBook-Pro ~/hexo $ hexo g [15:13:57] INFO Validating config INFO Start processing INFO Files loaded in 3.05 s (node:18613) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency (Use `node --trace-warnings ...` to show where the warning was created) (node:18613) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency (node:18613) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency (node:18613) Warning: Accessing non-existent property &#39;lineno&#39; of module exports inside circular dependency (node:18613) Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency (node:18613) Warning: Accessing non-existent property &#39;filename&#39; of module exports inside circular dependency INFO Generated: tags/index.</description>
    </item>
    
    <item>
      <title>「习作」《红星照耀中国》读书笔记</title>
      <link>https://example.com/post/%E4%B9%A0%E4%BD%9C%E7%BA%A2%E6%98%9F%E7%85%A7%E8%80%80%E4%B8%AD%E5%9B%BD%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 06 Aug 2020 00:02:52 +0000</pubDate>
      
      <guid>https://example.com/post/%E4%B9%A0%E4%BD%9C%E7%BA%A2%E6%98%9F%E7%85%A7%E8%80%80%E4%B8%AD%E5%9B%BD%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>每一个中国人都知道，自己祖国的全名是“中华人民共和国”，其中的“人民”昭示着这是一个社会主义的国家。但或许有人不知道的是，社会主义的火种，是如何在这片几代人之前还是半封建半殖民地的国家扎下根的？
　在今天，离我们那个时代或许已经十分遥远，但这并不能作为我们忘却斗争精神的理由。须知，我们今日的昌盛，不是资本家们施舍的，而是无数人民英雄们抛头颅、洒热血换得的！我们难道能因为出生在一个所谓“岁月静好”的年代，就忘记了革命年代的理想与信念吗？不！我们永不忘记！
　《红星照耀中国》最早出版于1937年。
　那个时代坏吗？坏，因为那个时代军阀混战，国土沦亡，最顶层的吸血鬼肆意掠夺人民的财产，用来充实自己家族的钱包。而底层的平民命如草芥，仅仅是活下去都要付出无法承受的代价。帝国主义肆虐，公然查收中国的政治，经济，在租界耀武扬威。买办阶级为一己私利打压民族工业，公然为帝国主义充当马前卒。牛鬼蛇神横行人间。可以说，那个时代是“坏”的。
　那个时代好吗？好，因为那个时代共产运动风起云涌，共产党人踏过漫长的征途，在西北建立了革命的根据地。“地火在地下运行，奔突；熔岩一旦喷出，将烧尽一切野草，以及乔木，于是并且无可朽腐。”随着苏维埃共和国的红旗在瑞金升起，觉醒的中国人民向全世界展示自己的力量。红军从中国南部远征至西北，宣告了中华苏维埃共和国的成立，这片土地上站起了这里的第一个社会主义国家。从此在无产阶级先锋队的带领下，这片土地上的一切都将地覆天翻。随着第二次国内革命战争以共产党的胜利而告终，革命者们拥有了胜利的一切条件，“红日初升，其道大光”，剥削者们注定不能安睡。可以说，那个时代是“好”的。
　这是最好的时代，这是最坏的时代。
　倘若有消灭剥削阶级的希望，这就是最好的时代；
　倘若长夜漫漫，看不见革命的星火，如同一沟绝望的死水，清风吹不起半点涟漪，这就是最坏的时代。
　黎明前的黑暗是最黑暗的时候，是一切反革命势力都聚集在一起，企图绞杀新生的苏维埃政权的时候，尽管如此，社会主义的胜利最终会会点燃天边的朝霞，让黑夜无处遁形。
　他们污蔑新生的红色政权，试图通过宣传机器让民众相信那只是藏在山坳里的几千饥饿的土匪，但他们如何解释自己的军队在一次次战斗中被自己口中的“藏在山坳里的几千饥饿的土匪”打得落花流水呢？纵使他们可以派出百万大军，让外国的军事顾问来做参谋，纵使他们可以靠兵力的优势取得战术上的胜利，但他们永远都不可能取胜，因为他们自己也不知道自己的敌人是如何获胜的。共产主义者胜利的基础是人民，哪怕他们能从肉体上消灭这片土地上所有的共产主义者，只要共产主义的精神还在，共产主义的胜利就一定会来临。
　当他们在饥荒时哄抬米价，投机倒把时，是否知道有一个十六岁的少年看到被饿得不成人形的农民后，凭着少年时的一腔热血，带领农民攻打自己同乡的粮仓？
　当他们趾高气扬的要求冒犯自己的“苦力”摆宴席，放鞭炮来给自己赔礼道歉时，是否知道有一个工人正因为自己和工友们被厂长因此欺压，并用罢工来想压迫者发出警告？
　当他们让自己的走狗搜刮民脂民膏，试图从蚊子的腹中刳出最后一点脂油时，是否知道有一位被他们称作是“劣迹昭著”的“土匪头子”，用一把菜刀领导了当地民众的反抗，建立了一个位于腹地的苏维埃政权？
　当他们血腥镇压因走投无路而起义的反抗队伍时，是否知道在一幢乡间小屋中，有一个青年正用帘子遮住自己房间的灯光读《盛世危言》？
　他们是否想过，自己已习以为常的一举一动，都是在挖掘自己的坟墓？
　肉食者们不会明白。
　他们也一样。
　有人指责我们，说我们对待那些剥削，压榨无产阶级的人过于残酷；但请问，过于“残酷”是指什么？是指我们改变了旧有的，从人民身上吸血的的生产关系吗？如果是，那我们会坦然的承认自己的所作所为。
　诚然，我们何尝不想要和平的发展，迈入下一个阶段？但当时的中国真的有“和平发展”的道路可走吗？一开始，我们并没有到农村去发展革命事业，但资产阶级政府的军队在城市里大肆屠杀支持共产党工人和学生；一开始，红军并没有铲除地主阶级的人本身，但那些地主立即就勾结反动势力，组建“还乡团”反过来攻击红色政权；一开始，我们并没有全面向资产阶级政府开战，但他们每天都从外国手里拿“援助中国人民”的物资来镇压中国的人民。
　有人指责我们对待就阶级不人道，但他们在三千年的历史中就对人民人道了吗？区别只是在于，这次是如同暴风骤雨般扫尽一切枯朽的，而他们的所作所为是在三千个春秋的漫长岁月里慢慢地折磨着无数代人。当我们消灭旧有阶级时，就有人跳出来，说我们不人道。但他们在数千年中鞭策上亿劳动者奔波一生，最后只换得一身疾病，以高利贷令佃户整日劳作，连晚上都无法安睡，一生都生活在屈辱，痛苦，贫穷与悲痛中时，他们是否想过半个“人道”？
　有人指责我们是“赤匪”，但他们自己又是否是“政府”呢？如果是，是谁的“政府”呢？是资本家和地主的政府吗？如果是，那我们推翻它是天经地义的。
　正如《钢铁是怎样炼成的》所说：
　“他们传瓦莉亚到法庭上去作证。她回来跟我们说，斯涅古尔科承认他进行过共产主义宣传，但是断然否认他背叛祖国。他说：我的祖国是波兰苏维埃社会主义共和国。是的，我是波兰共产党党员。我当兵是被迫的。我一向所做的工作，不过是帮助那些跟我一样被你们赶到前线的士兵睁开眼睛。你们可以为了这个绞死我，但是我从来没有背叛自己的祖国，而且永远都不会背叛。只是我的祖国跟你们的不同。你们的祖国是地主贵族的，我的祖国是工人农民的！我深信，我的祖国一定会成为一个工农大众的国家，而在我的这个祖国里，决不会有人说我是叛徒。”
　没错，我们的祖国是中华苏维埃共和国，而他们的祖国是中华民国。我们的祖国是无产阶级的，他们的祖国是资产阶级的。倘若他们坚持要爱自己的祖国的话，我们只会毫不迟疑的将他们和他们的祖国一起送进地狱。
　正如马克思和恩格斯在《德意志意识形态》中所说：“民族是“虚幻共同体”，民族间的斗争是“虚幻的斗争”，目的是掩盖真实的阶级斗争”“民族主义不是天经地义的自然真理，而是资本主义时代的产物”
　资产阶级宣传国家矛盾，要求无产阶级无条件妥协，是为了掩盖国内愈演愈烈的阶级矛盾。他们口中的“国家利益”其实就是“资产阶级利益”，与无产阶级的利益是相冲突的。只不过他们用“国家”这一概念巧妙地把所有阶级包括了，试图用虚幻的“最广大人民”来掩盖阶级斗争。国家之间的冲突，本质上是一个国家对另一个国家的剥削，当这一点被指出后，“国家利益”的神话也就不攻自破了。“工人没有祖国。决不能剥夺他们所没有的东西。因为无产阶级首先必须取得政治统治，上升为民族的阶级，把自身组织成为民族，所以它本身还是民族的，虽然完全不是资产阶级所理解的那种意思。”共产党永远都是代表是无产阶级利益，而非代表某个国家，某个民族的利益的。
　在红军长征的路上，被压迫的不止汉族，还有彝族，藏族，回族……它们几千年来都生活在水深火热之中，在社会主义革命中迎来了解放，为何？因为“中华苏维埃共和国”不是某一个民族的国家，它不属于任何一个民族！所谓“民族”的概念是资产阶级革命后才被逐渐提出的，是为了迎合资产阶级的利益而被捏造出来的。资产阶级高呼着：“为了伟大的民族！”人民便蜂拥而至在战场上流尽了最后一滴血，到头来却只是充实了资产阶级的钱包。中华苏维埃共和国不是民族国家，而是无产阶级的国家；中华苏维埃共和国不会维护某一个民族的利益，更不会剥削其他民族，它是属于无产阶级的，是无产阶级的苏维埃。
　社会主义革命，是一场燃遍整个中华大地的熊熊烈火，是这片土地上发生过的所有革命中最长久，最深刻，最彻底的：我们将骑在人民头上的吸血鬼和寄生虫枪毙，改革了原有的生产关系，甚至派出军队迎击侵略我们的日本帝国主义——哪怕立刻就被南京政府十一师精锐新军拦截。
　这场革命与自陈胜吴广以来的任何一次革命都要不同，之前的革命，只是一小部分人推翻另一小部分人的统治，革命后，贵族仍然骑在人民头上作威作福，佃户仍然改变不了被迫借高利贷最后破产的命运。而这次是大多数人的革命，同时也是社会制度的革命，历史的车轮滚滚向前，自工业革命以来逐渐成型的新阶级——无产阶级，正在迎来属于自己的胜利。
　在黎明前的黑暗中，共产主义者们转移到了中国最不发达的地区之一：西北。这里很少有高产的田地，工业基础为零，主要的产业是畜牧业。但共产主义者们并未因此气馁，他们穿越大半个中国，将战略转移时仅有的工业设备投入建设；开采原油的矿藏，经营着全国最丰富的钨矿；他们在当地展开扫盲运动，甚至将部分地区的识字率提高到了百分之八十。他们仅仅靠着自己的双手，在不久前还是白地的地方建立了欣欣向荣的城市。这一切都使资产阶级政府的反动宣传不攻自破，甚至不需要什么人去修饰一番，这些事件本身就已经证明了，中华苏维埃共和国，是一个比中国其他任何地方都要伟大的政权。
　今天并不是和平的年代，阶级斗争从未熄灭，在实现共产主义前永远都不会熄灭。毫无疑问，帝国主义的阴云自二战结束以来，就一只萦绕在我们头顶：看吧，他们手握资产阶级政权的大棒，肆意镇压试图团结起来的人民；他们不顾人民的嗟伤，明目张胆地从工人身上剥削最后一点剩余价值；他们利用权力，在人民遇到劫难时中饱私囊；他们操纵舆论，故意令共产主义的理想被人弃之不顾。对战乱地区的军火输出，已经暴露了他们的帝国主义嘴脸。我们难道能忘记？几十年前的先驱者们，暴霜露，斩荆棘，在井冈山上吃着南瓜与帝国主义作斗争，二十一世纪的我们就没有这种精神了吗？
　我们没有所谓的“岁月静好”，正相反，我们出生在一个矛盾激烈的年代。出生在红旗下的我们，更应该勇于前进，不畏艰难，与帝国主义势力作斗争。抬起头看看你眼前的红旗吧，左上角的符号——镰刀与锤头，昭示着无产阶级是这个国家的统治阶级；再看看我们的国徽，上面的齿轮与麦穗象征着工人与农民，才是这个国家的根本。
　“并不是所有的人，都理解支持我们的建设，但并不能否认她的伟大。我们的战士，神圣的信仰，永远都不会磨灭，它照耀着我们每一个人。”
　我们必须明白，只有革命的斗争，才能从敌人手中夺回本应属于我们的东西。身为中学生的我们，必须用知识武装自己的头脑，将马克思的名言“任何时候我也不会满足，越是多读书，就越是深刻地感到不满足， 越感到自己知识贫乏” 铭记在心，投身于共产主义的事业中去。</description>
    </item>
    
    <item>
      <title>题解P3197 [HNOI2008]越狱</title>
      <link>https://example.com/post/%E9%A2%98%E8%A7%A3p3197-hnoi2008%E8%B6%8A%E7%8B%B1/</link>
      <pubDate>Fri, 14 Feb 2020 17:16:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E9%A2%98%E8%A7%A3p3197-hnoi2008%E8%B6%8A%E7%8B%B1/</guid>
      <description>思路 这道题可以从反面去考虑，即：先计算出不可能发生越狱的状态总数，并用它减去总状态数即为这道题要求的答案。
首先，在不失一般性的情况下，不妨设第一个房间里的犯人的宗教信仰为$p$，则第二个房间里的烦人的宗教信仰不能为$p$，因此第二个房间里的犯人的宗教信仰共有$(m - 1)$种可能性。同理，第三个房间里的犯人的宗教信仰也共有$(m - 1)$种可能性……故第二个到第$n$个房间里的烦人的宗教信仰共有$(n - 1)^{(m - 1)}$种可能性。而第一个房间里的犯人的信仰有$n$种可能，故不可能发生越狱的状态总数为 $$n×(n - 1)^{(m - 1)}$$
那么，总状态数是多少呢？容易求的总状态数为$n^m$，所以题目所求为 $$n^m-n×(n - 1)^{(m - 1)}$$
这道题还有一个要注意的地方：$m$最大为$10^8$，因此要用快速幂来计算
AC代码：
#include&amp;lt;iostream&amp;gt;using namespace std; const long long MOD = 100003; long long power(long long b, long long p) { if(p == 0) { return 1; } long long ans = power(b, p / 2); ans = ans * ans % MOD; if(p % 2 == 1) { ans = ans * b % MOD; } return ans; } int main() { long long m, n; cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; n; long long ans = ((power(m, n) - m * power(m - 1, n - 1)) % MOD + MOD) % MOD; cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl; return 0; } </description>
    </item>
    
    <item>
      <title>题解 SP196 【MUSKET - Musketeers】</title>
      <link>https://example.com/post/%E9%A2%98%E8%A7%A3-sp196-musket-musketeers/</link>
      <pubDate>Mon, 29 Jul 2019 11:42:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E9%A2%98%E8%A7%A3-sp196-musket-musketeers/</guid>
      <description>在模拟赛中遇到了这道题。（后来才知道是SPOJ上的原题）
话不多说，开始动态规划三步走。$Let&amp;rsquo;s\ go!$
定义状态 假设第1个人能够赢得整场决斗：
倘若把这位仁兄复制一份，放在$n + 1$的；那么，在一阵厮杀后，他和自己的分身应当能够相遇。那么，我们就和 在[NOI1995]石子合并中一样，将数组翻倍后再处理。
显而易见定义状态如下：
$dp_{i,j}$为第$i$人与第$j$人是否能够相遇
状态转移方程 现在思考一下：第$i$人与第$j$人是否能够相遇？
按照区间DP的思维，我们在$i$与$j$之间选取一个人$k$
若$i$与$k$能相遇，$k$与$j$能相遇，且$i$与$j$当中的任何一个人能干掉$k$
故状态转移方程为：
$$dp_{i,j} = dp_{i,k} &amp;amp;&amp;amp;\ dp_{k,j} &amp;amp;&amp;amp;\ (w_{i,k} || w_{j,k})$$
边界条件 显然， 若两人本来就相邻，则$dp_{i,j} = 1$
代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstring&amp;gt;using namespace std; const int MAXN = 100 * 2 + 5; int w[MAXN][MAXN], f[MAXN][MAXN]; int n; int main() { int t; cin &amp;gt;&amp;gt; t; while(t--) { memset(f, 0, sizeof(f)); //数组清零，我在这里掉了两次坑  memset(w, 0, sizeof(w)); cin &amp;gt;&amp;gt; n; for(int i = 1; i &amp;lt;= n; i++) { for(int j = 1; j &amp;lt;= n; j++) { char c; cin &amp;gt;&amp;gt; c; w[i][j] = c - &amp;#39;0&amp;#39;; w[i + n][j + n] = w[i + n][j] = w[i][j + n] = w[i][j]; } } for(int l = 1; l &amp;lt;= n + 1; l++) { for(int i = 1; i + l - 1 &amp;lt;= n * 2; i++) { int j = i + l - 1; if(l &amp;lt;= 2) { f[i][j] = 1; //边界条件  continue; } for(int k = i; k &amp;lt;= j; k++) { if(f[i][k] &amp;amp;&amp;amp; f[k][j] &amp;amp;&amp;amp; (w[i][k] || w[j][k])) { f[i][j] = 1; break; } } } } int ans = 0; for(int i = 1; i &amp;lt;= n; i++) { if(f[i][i + n]) { ans++; } } cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl; for(int i = 1; i &amp;lt;= n; i++) { if(f[i][i + n]) { cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl; } } } return 0; } </description>
    </item>
    
    <item>
      <title>慢慢的，就没有了，就像从未存在过</title>
      <link>https://example.com/post/%E6%85%A2%E6%85%A2%E7%9A%84%E5%B0%B1%E6%B2%A1%E6%9C%89%E4%BA%86%E5%B0%B1%E5%83%8F%E4%BB%8E%E6%9C%AA%E5%AD%98%E5%9C%A8%E8%BF%87/</link>
      <pubDate>Tue, 02 Jul 2019 23:20:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%85%A2%E6%85%A2%E7%9A%84%E5%B0%B1%E6%B2%A1%E6%9C%89%E4%BA%86%E5%B0%B1%E5%83%8F%E4%BB%8E%E6%9C%AA%E5%AD%98%E5%9C%A8%E8%BF%87/</guid>
      <description>几年以前，我曾经嘲笑过某科技界大佬。当时他说：也许90后、95后会慢慢不知道谷歌是什么网站。
　那一年，这对于我来说简直就是世界上最好笑的笑话。谷歌，全世界最卓越的互联网公司，活在互联网的一代中国人，会不知道他们的网站？
　今天，我收回这句嘲笑。因为这件不可能的事，它慢慢变成了现实。
　没有人再关注什么谷歌不谷歌。对他们来说，百度也蛮好用的，反正他们几乎没用过谷歌。没有谷歌又怎样？大家还是开心的刷微博，看微信，听歌，看娱乐节目。对于从来就不知道谷歌的人来说，少了谷歌又有什么影响？
　多年前，我们也是可以登陆Facebook的。其实这个网站和校内一样，也挺蠢的。可在上面你能看到老外们的生活，可以轻易的跟一万公里以外的人互相拜访，可以看到很多根本不会开到校内上的主页。你用汉语回复，下面给你聊起来的可能是香港仔，可能是台湾人。你用英语回复，说不定有比你英语用的更蹩脚的寂寞的北欧人来跟你搭讪。你感觉地球真的变成了地球村，你还没拉门走出去，别人就推门走了进来。
　然后，它就没有了。起初，它的失踪激起了很大的声音，后来，声音就消失了。
　多年前，我们也是可以登陆Twitter的。其实这个网站和微博一样，也不过是些信息流，刷上一整天，也不见得有什么用处。但至少，你可以以最快速度获取你想知道的任何新事，你会真正了解什么事情在全世界是流行的，而不是经过各种截图、翻译、转发，甚至曲解、断章取义、黑白颠倒的东西。你知道的是真相，赤裸裸的，也许有点太短的真相。但至少中间不会有无数人的加工与再加工，偏激、片面，就在这个过程中产生了，不管后来者有意还是无意。
　然后，它就没有了。首先是它的本体没有了，然后它的模仿者也没有了，模仿者的模仿者也没有了。只剩一个模仿者的模仿者的模仿者，现在你每天能在上面看到无数广告。
　多年前，我们也是可以登陆YouTube的。对于有的人来说，这个网站就是个大型优酷，当年有人信誓旦旦的说，没有YouTube，我们中国人会很快让优酷超过YouTube。可这么多年过去了，视频还是那么卡，内容还是那么垃圾，原创还是那么容易被盗窃，视频丰富度还是那么的可怜。在YouTube上，你能看到全世界最棒的手艺人，最逗乐的笑话，最天马行空的创意，最激荡人心的音乐，最美好的完美瞬间，可在优酷上，你想看一分钟视频，请先看半分钟广告。
　哦，对了。Instagram，有些人可能感觉它和QQ空间也差不多。可我在上面关注了六百多个摄影师，它们都是顶好顶好的影像记录者，每天看他们的作品，我感觉到很幸福，那种即使没有到那里去，也身临其境的幸福。我还在上面认识了一个日本的爱自拍的帅小伙，一个爱喝酒的韩国大叔，一个十年前到过中国今天会在每张我发的紫禁城照片下点赞的美国大爷，一个美丽无比的俄罗斯妹子，我和他们基本上都难以交流，语言是很大的障碍，但几个简单的单词，心意也就到了，这种感觉，有时候比多年老友相聚还兴奋。因为这是人类不同族群自由交流互相沟通的过程，这种过程很神奇，真的很神奇。
　可现在，它没有了，它之所以没有就因为在某个特定的时间你在搜索特定的词汇时，会搜出来特定的照片。虽然这么搜的人并不多，虽然看到的人也不会大惊小怪，也不会觉得天黑了，天亮了，天要塌了，天要变了。可它就是没了，Instagram，就这么没了。谷歌也是这么没的，Twitter也是这么没的，Facebook也是这么没的。不知道是什么人，在什么场合，说了什么话，下了什么决定。就要有超过十亿人像陷于哥谭市的孤岛里一样，看着一座又一座桥梁被炸掉，又被炸掉，又被炸掉，然后，就什么都没了。
　我时常觉得悲哀，真的好悲哀，一个我根本不认识也不知道是谁的人，也许是一个群体，在不断抢走我身边的东西，而我却无能为力。我抱怨一声，他听不到，任何人都听不到。我怒吼一句，身边的大多数人却像看疯子一样的看着我。我哀嚎一声，这声音被阻碍在黑黑的幕墙以里。我发出尖锐的嘶吼，这声音传不了多远，就和我那被抢走的东西一样，消失了，不见了，就像从来没存在过一样。
　对于本来就没存在过的东西，有谁又会觉得在意呢？那些本来拥有又被掠夺的人的哀愁，后来的人又怎么懂呢？我曾经是拥有一切的，我曾经是拥有世界的，我站在这片土地上，呼吸的是自由的空气，饮下的是自由的琼浆玉液。就在长的无法计数的时间里，我自由生命的一部分又一部分就这么被杀死了，突然就杀死了。可我还始终觉得，它们还奄奄一息的活着，就像它们是慢慢的死去的一样。
　可它们终归是死了，而且随着它们的死，愈来愈多的事情慢慢的发生了，很慢很慢，几乎不被人察觉，可还是发生了。
　没有谷歌，我可以用百度呀。可某些结果被越挪越后，越挪越后，最后就不见了。就像本来就不该搜出这个结果一样。
　没有Facebook，我可以用校内呀。可你想发只有在Facebook上能发的文章，很快在校内上就失踪了。接着，校内变成了人人，话题变成了人人都关心的话题。大家都在抢着看星座、明星、八卦、娱乐。没有人会关心什么消失了，反正它们本来也没多少存在感。
　没有YouTube，我可以用优酷呀。可你却经常只能在优酷上看到抄袭别人的作品，而且还不署名，而且还洋洋得意，而且还自我陶醉，就好像那个idea本来属于他自己一样。你看了还要惊呼，他是如此的有创意！好一个抄袭的创意，可你却不知道，因为你不知道这个世界上有个网站叫YouTube。
　没有Twitter，我还可以用微博呀。可你想知道最近发生了什么，你搜的越勤快，越能看到越明显的“根据相关法律法规，相关搜索结果不予显示”。时间长了，你想，反正知道了也没什么用，不如不看了。
　慢慢的，一扇又一扇的门关上了。今天你打开世界上最大的博客网站，发现它没了。明天你一看，世界上最好的设计师分享网站没了，一开始是刷新的很慢很慢，后来它就没了。过两天再一看，平常每天都会读两篇文章的媒体网站没了，那里的文章缤纷多彩，最后都变成了该页无法显示几个字。再过几个月，大学的网站不让上了，摄影师的网站不让上了，就连百度日本这种自家网站，也没了。
　接着，漫画看不了了，接着，动画看不成了。接着，美剧英剧失踪了。下载美剧英剧的网站又又又失踪了。尊重正版，保护权益，行吧，然后字幕网站也没了。
　游戏没了，你习惯性登陆的游戏网站，发现下载栏正在整治中。论坛关了，天天都在看的论坛，突然接到相关部门的电话，因为“报备问题”不让办了。个人网站，私人博客，对不起，说没就没有，你在上面存了多少多年辛勤耕耘的东西都没用。
　你关注的人，有一天你登陆微博，发现他怎么好久都没说话了，然后你搜索了一下，发现他的账号不存在了，而且你搜他的名字，他的名字未予显示。
　一盏一盏的灯，灭了。四面八方的光源，消失了。我们生活的五光十色的世界，变成了一片黑色。
　天黑了，那么睡觉吧，但愿长醉不复醒。
　最后，我们变成了一群做梦的人，这个梦的名字，叫根据相关法律法规，相关搜索结果不予显示梦。
　作者：小海，来源：豆瓣网，原文已被和谐</description>
    </item>
    
    <item>
      <title>OIer&#39;s News 【创刊期】</title>
      <link>https://example.com/post/oiers-news-%E5%88%9B%E5%88%8A%E6%9C%9F/</link>
      <pubDate>Thu, 27 Jun 2019 16:11:57 +0000</pubDate>
      
      <guid>https://example.com/post/oiers-news-%E5%88%9B%E5%88%8A%E6%9C%9F/</guid>
      <description>创刊期 创刊期 大家坚定一个信念吧:
我们是OIER 我们是O——I——E——R！ 我们是OIer， 所以我们 不用在跑道上挥汗如雨； 不用在球场上健步如飞； 更不用在没事的时候， 经受非人的体能训练……
但是， 我们却要把头脑 高速运转， 还要接受一大堆 大学生也只是 “了解即可”的知识， 把一个个抽象的问题 转化为一篇篇 优美的代码， 才能在F9按下以后 获得欢呼。
不要以为我们 机房里没有风吹， 没有日晒， 就比勤劳的体育生们轻松， 只不过是大脑和四肢 的区别罢了。
可是， OIer的寂寞和委屈又有谁能懂？ 自习课鏖战机房， 却被认为而是逃课上网； 为荣耀耽误考试去比赛， 却被认为是逃避。 体育的同学们虽然辛苦， 但在挥汗如雨的背后， 有人在喝彩鼓掌； 在风吹日晒的同时， 有粉丝在仰慕。
而我们呢？ 与UnAC较劲的时候， 只有那一遍遍的运行窗口， 知道我们的不屈； 刷题的漫漫长夜， 只有陪伴我们的笔记本电脑， 知道我们的不懈； 在自习课别人学习的时候， 只有板砖般的算法导论， 知道我们的进取； 在机房泡得抢不上饭的时候， 只有五毛一包的干脆面， 知道我们的执着……
没有人会理解， OIer见面， 除了程序、算法之外 别无他言。 我们的世界里， 从来不会有游戏、歌星的出现。 这不是被家长逼迫的“小三门”， 是我们的兴趣， 我们的爱好， 乃至我们的事业。
每一个OIer都幻想着 自己脖子上可以 挂上一块沉甸甸的金牌， 而不是 万恶的应试教育的枷锁。 没准哪个OIer， 就是下一个艾伦•图灵， 挑战头脑的极限， 去做最不平凡的自己。。。。。。。</description>
    </item>
    
    <item>
      <title>写代码的小女孩</title>
      <link>https://example.com/post/%E5%86%99%E4%BB%A3%E7%A0%81%E7%9A%84%E5%B0%8F%E5%A5%B3%E5%AD%A9/</link>
      <pubDate>Fri, 31 May 2019 00:02:57 +0000</pubDate>
      
      <guid>https://example.com/post/%E5%86%99%E4%BB%A3%E7%A0%81%E7%9A%84%E5%B0%8F%E5%A5%B3%E5%AD%A9/</guid>
      <description>天冷极了，下着雪，又快黑了。这是NOIP的前夜。在这又冷又黑的晚上，一个衣衫破烂的小女孩在机房敲着代码。她从班里逃出来的时候还拿着一本算导，但是有什么用呢？那是一本很破旧的书——那么大，一向是她妈妈垫桌角的。她默写SPFA的时候，年级主任突然冲进机房，吓得她把算导都丢掉了。书叫一个学数竞捡起来拿着跑了。他说，他可以用那本书当草纸，证明切比雪夫定理。
　小女孩只好自己写二叉堆，一双小脚冻得红一块青一块的。她面前的草纸堆得满满的，上面全是DP转移方程。这一整天，没有一个OJ让她AC一道题，她已经交了32遍采药了。
　可怜的小女孩！她又冷又饿，浑身战栗地写着二叉堆。CRT显示器发出的光落在她的枯黄的长头发上，那干枯的头发打成卷儿披在肩上，看上去就像二叉树，不过她没注意这些。每个显示器里都透出光来，机房里飘着一股CPU发糊的怪味，因为这是NOIP前夜——她可忘不了这个。
　她在主函数前面停了下来，蜷着趴在键盘上。她觉得更冷了。她不敢回家，因为她还没调完二叉堆，没写对一个DP方程，教练一定会骂她的。再说，换成别的数据结构，一样写不出来。这些题都太水，虽然神犇都写过题解了，但是题解上一般都只有三个字：傻X题。
　她几乎绝望了。啊，哪怕一个函数不会RE，对她也是有好处的！她每写一遍程序，跑出来的结果就不一样，要是她有数据，她就知道哪一个程序是算对了的。她得不到数据了，因为机房上不去网了，全校的网速都让隔壁的年级主任拿来下小电影了。如果能保证下一个程序能AC，她就敢再写几十KB的代码，但是她是不敢啊，她怕又算出来一个奇葩的结果来。 她新建了一个cpp重写了程序。编译通过了了，样例过了。这次，她感觉自己站在IOI的考场中AK。学校的大门上，贴着“我校学生以国际金牌向110周年校庆献礼”的条幅。在班级内的非诚勿扰中，全班男生都给她留了灯。这时候，程序又RE了，她面前只有cmd上的黑底白字。
　她又写了一道模拟。这一回，她坐在美丽的二叉堆下。这棵二叉堆，比她在丽洁代码中看到的常数还要小，还要短。眼前是许多优美动人的ASCII码，那些都是她写的程序，各种可爱的指针在跳跃着，满世界都是系统栈，都在向她眨眼睛。小女孩向眼前的系统栈伸出手去。这时候，眼前的ASCII码还在，条幅还在，指针还在，年级主任还是和蔼地微笑着。只见那些代码那些指针越升越高越升越高，最后成了在天空中闪烁的星星。有一颗星星落下来了，在天空中划出了一道细长的红光。
　“有一个什么人快要死了。”小女孩说。唯一疼她的学姐保送之前告诉过她：一颗星星落下来，就有一个灵魂要到上帝那儿去了。
　她notepad++中又写了一个快排。这一回，她把能用的IDE都用了。学姐出现在亮光里，是那么温和，那么快乐。 “学姐！”小女孩叫起来，“啊！请把我带走吧！我知道，系统栈一溢出，您就会不见的，像那校门的条幅，浮点数的精度，循环队列的空间一个样，就会不见的！”
　她赶紧编译了5KB的高精度模板，要把学姐留住。一大把程序发出强烈的光，把机房照得跟白天一样明亮。学姐从来没有像现在这样温柔，这样美丽。她把小女孩抱起来，搂在怀里。她们俩在光明和快乐中飞走了，越飞越高，飞到那没有DP，没有图论，也没有数据结构的地方去了。
　第二天清晨，这个小女孩坐在机房里，两腮通红，嘴上带着微笑。她死了，在NOIP的前夜死了。NOIP Day1的太阳升起来了，照在她小小的尸体上。小女孩坐在那儿，显示器上还有一坨编译过的代码。
　“她想好好复习复赛。”人们说。谁也不知道她曾经看到过多么美丽的东西，她曾经多么幸福，跟着她学姐一起走向新世界的幸福中去。</description>
    </item>
    
    <item>
      <title>摘录自「SCP基金会」中的一些句子</title>
      <link>https://example.com/post/%E6%91%98%E5%BD%95%E8%87%AAscp%E5%9F%BA%E9%87%91%E4%BC%9A%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%A5%E5%AD%90/</link>
      <pubDate>Tue, 28 May 2019 22:34:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%91%98%E5%BD%95%E8%87%AAscp%E5%9F%BA%E9%87%91%E4%BC%9A%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%A5%E5%AD%90/</guid>
      <description> 已死之人，向赴死者致敬。
我想要宪法赋予我的那个世界。
大概你的确是死了，但我们还在前行，消逝的能够被盖棺定论，而还存在着的仿徨呐喊抗争着，却在眨眼就会丧命，空中会窜出无敌吃人大蜥蜴，永远有儿童和女孩在惨叫的世界的黄昏里，拾起那一朵清晨看见过的花。
当你们的时代过去，请继续送出信息，好让下一个声音响起来对抗黑暗。
他们很快乐，至少在最后之前。不是所有的船都得在黑夜中航行。
你已经做完了你必须去做的事，现在，请休息吧，晚安。
我会使得我们的宇宙成为一个值得拯救的宇宙的。
她死在一个遥远的地方，脸上带着笑容，手里握着武器，身边围着敌人。她向我们展示了一个真正的战士应该是什么样子。
我看到一片广阔的海岸，在我们面前展现的事物超越头脑所能理解的范畴，沙滩上的每一粒沙子，每一滴水和空气分子都是在讲述一个故事。每个都是要被唱响的歌。他们每个人都充满生机，笑声，苦难和仇恨。他们都是一样的，即使他们都是不同的。
我爱你，红。我爱你，安娜。五年，十一个月，二十天。
那些受影响的人，是因为他们失去了他们内心世界的孩子。他们不能只看到最表面的东西，他们把自己的观点注入一切然后从中获取乐趣。
神破碎自己，我们才得完整.
所以我央求你：这—真知—绝不能被抹去、遗忘。这不是收容。这是疯狂。
大概人们能哀叹于你的不幸，但没人有资格评论你为&amp;quot;不争&amp;quot;。在这个遍布异常的世界里，努力在绝大多数人眼前拉上一张布帘。从无数扭曲而血腥的异常下保护绝大多数人类的我们，可能面对着每天都有值得尊敬的人因异常而死亡的不幸，但也能在和这一切抗争着的同时，期冀着一个立于晨间，蝴蝶环绕翩翩飞舞的世界。
他想起内布拉斯加的麦田。
用伤害无辜者来掩盖自己的错误是心虚的体现，也永远掩盖不了。
他们也一样。
根据完整版资料我发现，601被姜特工发现的地方，就在那段时期执行流产手术频率最高的医院原址，更精确一点说，就在那个医院的化粪池原址。那一百天内被强制流产或者“生下来就掐死”的数以万计的婴儿，他们本可能成为你，可能成为我，可能成为这个世界上的任何一个人和任何一个人的爱人，但他们的生命还没开始，就被埋葬在了那个化粪池。
……是神又怎么样呢。这个国家最早的传说里并没有神的席位，取而代之的是被山挡住就决定挖山的农夫，被海淹死就去填海的小女孩，被太阳炙烤便搭箭指向太阳的猎人，或者从神那里偷来土壤治水的老人。“王侯将相，宁有种乎”，没错吧？我们的历史，从来不是由神兽或妖，而是由普通人来书写的。
 </description>
    </item>
    
    <item>
      <title>洛谷题解 P1226 【【模板】快速幂||取余运算】</title>
      <link>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1226-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E4%BD%99%E8%BF%90%E7%AE%97/</link>
      <pubDate>Tue, 30 Apr 2019 15:04:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1226-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E4%BD%99%E8%BF%90%E7%AE%97/</guid>
      <description>题目描述 洛谷P1226
说明 看到题解里貌似并没有Python的题解，我来发一个，共两行。
众所周知，为什么有时候洛谷er们要用Python呢？因为Python里已经包装了很多算法，用在OI中基本上等于打游戏时开外挂。虽然
对于这道题，Python 3中有一个数学函数pow()，它在help()函数中的说明是这样的：
pow(x, y, z=None, /) Equivalent to x**y (with two arguments) or x**y % z (with three arguments) Some types, such as ints, are able to use a more efficient algorithm when invoked using the three argument form. x**y % z，这正好就是这道题所用到的算法，所以直接调用pow(b, p, k)就OK了。一般来说，编程语言本身的库函数都会往死里优化，基本上不用担心时间复杂度的问题。（除了某些特别坑的）
最后要注意的一点就是，很多人提交Python都莫名RE，原因是Python 3的input()函数返回的是字符串，必须用int()转换为整数。如果一行有多个数字，则调用split()方法分割成多个字符串。
上代码：
a = input().split() print(a[0] + &amp;#39;^&amp;#39; + a[1] + &amp;#39; mod &amp;#39; + a[2] + &amp;#39;=&amp;#39; + str(pow(int(a[0]), int(a[1]), int(a[2])))) </description>
    </item>
    
    <item>
      <title>「文章转载」赛博空间独立宣言</title>
      <link>https://example.com/post/%E6%96%87%E7%AB%A0%E8%BD%AC%E8%BD%BD%E8%B5%9B%E5%8D%9A%E7%A9%BA%E9%97%B4%E7%8B%AC%E7%AB%8B%E5%AE%A3%E8%A8%80/</link>
      <pubDate>Fri, 26 Apr 2019 17:27:15 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%96%87%E7%AB%A0%E8%BD%AC%E8%BD%BD%E8%B5%9B%E5%8D%9A%E7%A9%BA%E9%97%B4%E7%8B%AC%E7%AB%8B%E5%AE%A3%E8%A8%80/</guid>
      <description>工业世界的政府，你们这些肉体和钢铁的巨人，令人厌倦，我来自赛博空间，思维的新家园。以未来的名义，我要求属于过去的你们，不要干涉我们的自由。我们不欢迎你们，我们聚集的地方，你们不享有主权。
　我们没有民选政府，将来也不会有，所以我现在跟你们讲话，运用的不过是自由言说的权威。我宣布，我们建立的全球社会空间，自然地不受你们强加给我们的专制的约束。你们没有任何道德权利统治我们，你们也没有任何强制方法，让我们真的有理由恐惧。
　政府的正当权利来自被统治者的同意。你们从来没有要求过我们的同意，你们也没有得到我们的同意。我们没有邀请你来，你们不了解我们，不了解我们的世界。赛博空间不在你们的疆界之内。不要认为你们可以建造这样一个疆界，好像建造一座公共建筑。你们没有这个能力。这个疆界是一件自然行为，它将从我们的集体行动中生发出来。
　你们从来没有参加过我们的大会，你们也没有创造我们的市场财富。对我们的文化，我们的道德，我们的不成文法典，你们一无所知，这些法典已经在维护我们社会的秩序，比你们的任何强制所能达到的要好得多。
　你们说我们有问题，你们要解决这些问题。你们用这个借口侵犯我们的领地。你们所宣称的这些问题，许多都不存在。真正冲突出现的时候，不公正出现的时候，我们自己会鉴定它，用自己的方式解决它。我们正在形成我们自己的社会契约。治理将出现，但根据的是我们世界的情况，不是你们的。我们的世界，是不同的。
　赛博空间由交易、关系和思想本身构成，它们像一道永恒的波浪，在我们的交流之网上部署着。我们的世界无处不在，又无处可寻，我们的世界不是肉体存在的世界。
　我们正在创造一个新世界，人人都可以进入这个世界，而不必考虑由种族、经济力、武力、出生地而来的特权或偏见。
　我们正在创造一个新世界，人人、处处可以表达他或她的信仰，无论这种信仰是多么古怪，而不再害怕被强制沉默或强制一律。
　你们关于财产、表达、身份、迁徙的法律概念及其关联对我们不适用。这些概念建立在物质的基础上，我们这里没有物质。
　我们的身份不涉及肉体，所以和你们不一样，我们不能通过肉体的强制来获得秩序。我们相信，我们的治道将从伦理、明智的自我利益和公益中产生出来。我们的身份可能分布在你们许许多多的法律管辖中。我们全部的立宪文化能够普遍认可的唯一法律就是这样一个法则：己所不欲，勿施予人。我们希望能在这个基础上确立我们特殊的解决方案。但是我们不能接受你们企图强加给我们的解决方案。</description>
    </item>
    
    <item>
      <title>DNS-over-HTTPS(DoH)简析与配置</title>
      <link>https://example.com/post/dns-over-httpsdoh%E7%AE%80%E6%9E%90%E4%B8%8E%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 15 Apr 2019 21:45:00 +0000</pubDate>
      
      <guid>https://example.com/post/dns-over-httpsdoh%E7%AE%80%E6%9E%90%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid>
      <description>本文同步发布于 Heliumの博客，到我的博客阅读体验更佳QwQ
DNS是什么 DNS（Domain Name System）是一项网络服务，用途是对全球各个网站的域名进行解析。如果听不懂上面这句话也没关系，接下来会讲解。如果你是网络方面的大牛可以直接跳过或关闭此网页。
简明易懂的DNS 举个例子，从前有个叫小明的人（目测此人已累死），开了一家商店。一开始顾客要去购物时,就直接去商店里买。
但由于网络环境的复杂性，让顾客直接记住地址是不太可能的。（你试试看？）于是就有人动了脑筋，推出了一样类似DNS的服务：你只需要说出地点（小明杂货店），服务商就会开车送你去目的地。
很多大公司实际上都推出了这份服务，例如阿里，百度，谷歌，Cloudflare等。
实际网络中的DNS，则是向服务器询问域名，而服务器返回IP地址。
顺便推荐几个质量好的良心DNS如下：
Cloudflare DNS: 1.1.1.1, 1.0.0.1
Google Public DNS: 8.8.8.8, 8.8.4.4
OpenDNS 208.67.222.222, 208.67.220.220
DNS查询 看到这里你可能有疑惑了，难道每一台DNS服务器都储存了很多IP地址和域名的对应吗？不是。一这很浪费空间，二这样很难更新。
以我的博客地址keepthethink.github.io为例，当你输入地址后：
1.你的电脑首先会去询问DNS服务器；
这个“DNS服务器”可能在任何地方，可能就在你家的路由器上，也有可能在万里之遥的灯塔国QwQ（如果你是非酋
当然，一般来讲你的路由器上不会真的有一个DNS服务端，如果你在本地登录912.168.0.1或192.168.1.1，你就会看到在“DNS”设置那一栏会有你的ISP的DNS地址（当然，如果你想把它换成公共DNS也可以，但要为你自己的网速负责。）
2.DNS服务器询问所谓“根服务器”；
根服务器询问.io域名的权威服务器；
.io域名的权威服务器询问.github.io域名的权威服务器;
.github.io域名的权威服务器将IP告知你的电脑；
OK
（这套措施实在是找不到合适的比喻，看不懂就跳过吧。）
注意事项 如果你访问的是一些比较国际化的网站，而且还使用了国外的DNS服务器，有可能会会给你分配个国外的IP地址。
举个最基础的例子：Hexo博客在注册网址时，进行的国内外分流。这是不排除某些睿智国外DNS不管三七二十一给你个国外地址的情形。
DNS缓存 这么干，空间的确节省了很多，但效率显然就更慢了。所以，DNS服务器中一般有个“缓存”，当你重复询问同一个网址时，直接找出缓存记录并答复。当然，每个一定的时间会更新缓存。
既然这套措施已经很完美了，那DoH是干嘛的？别急，马上就讲。
DNS劫持与HTTP劫持 DNS劫持：当DNS不那么老实 打个比方：
从前有个叫小刚的，他也开了家杂货店；
小刚发现小明的杂货店有很多客户，分外眼红，便拿钱贿赂了DNS服务商，于是，当顾客要求DNS服务商将其带到“小明杂货店”是，DNS会不管三七二十一将其带到“小刚杂货店”。在网络中，则是DNS服务器故意给出错误的IP地址。
这显然是无计可施的，一般来说，遇到这种人品烂的掉渣的服务商，最好的办法就是换一家，好在这年头网络条件不错，大多数DNS都不搞这种事。
但是，对于DNS劫持，刚才讲的一种情况并非最常见的，最常见的事下面这种：
假设只有服务商A收了贿赂，而服务商B没有。当你向DNS服务商B打电话时，你的电话服务商将其转接到服务商A，那你就前功尽弃了。唯一的方法是使用DNS-over-HTTPS，后面会讲解。
HTTP劫持：当ISP不那么老实 假设你向DNS服务器打了个电话，“我要去小明杂货店。”结果你的电话服务商窃听了这句话，得知了你的行程；甚至将其修改为“我要去小刚杂货店。”，然后你就不明不白的被带到了另一个地方。
在这种情况下，你的DNS服务商是老实可靠的，但你的ISP（网络服务提供商）则不那么可靠。当然，一般的ISP并没有那么猖狂，他们最多不过是往你身上塞几张奇♂怪♂的广♂告♂（想必大家都有这样的经历。）你有时候会不会发现你看到的广告就是最近曾经关注过的事物？
你也许会说，可以修改DNS来解决这个问题，但如果你的ISP让 Google Public DNS 跳转到 ... 之类与其同流合污的DNS地址怎没办？图样图森破。
注意
有哪些进行HTTP劫持的ISP？基本上都有：移动，联通，电信，天下乌鸦一般黑，呵呵。 一个极其明显的例子如下：
这种劫持的关键在于，DNS服务器与你之间的链接为“明文传输”，而非“加密传输”。这就导致每一个环节上的人都能随意修改你的链接。幸运的是，在生产力高度发达的9102年，加密技术早已像烂柿子一样成熟了，如HTTPS。
DoH的具体原理 DoH的具体原理其实就是在DNS外面套一层HTTPS。（而且更慢了）即流程变成了
 你的电脑 -&amp;gt; DoH服务器 -&amp;gt; DNS服务器 -&amp;gt; DoH服务器 -&amp;gt; 你的电脑</description>
    </item>
    
    <item>
      <title>「文章转载」他译作“维基”的那个网站消失在竹幕后</title>
      <link>https://example.com/post/%E6%96%87%E7%AB%A0%E8%BD%AC%E8%BD%BD%E4%BB%96%E8%AF%91%E4%BD%9C%E7%BB%B4%E5%9F%BA%E7%9A%84%E9%82%A3%E4%B8%AA%E7%BD%91%E7%AB%99%E6%B6%88%E5%A4%B1%E5%9C%A8%E7%AB%B9%E5%B9%95%E5%90%8E/</link>
      <pubDate>Mon, 15 Apr 2019 15:24:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%96%87%E7%AB%A0%E8%BD%AC%E8%BD%BD%E4%BB%96%E8%AF%91%E4%BD%9C%E7%BB%B4%E5%9F%BA%E7%9A%84%E9%82%A3%E4%B8%AA%E7%BD%91%E7%AB%99%E6%B6%88%E5%A4%B1%E5%9C%A8%E7%AB%B9%E5%B9%95%E5%90%8E/</guid>
      <description>本文放弃一切经济权利，各网站、公号和其他各类载体可在保持原文完整的基础上自由转载。
 这个周末，维基百科终于整体离我们而去。它的404，意味着13亿人再次被隔离于一个“普世产品”之外。
Pingwest创始人托马斯·骆在山寨发布会群里分享了他勤奋更新的微信公众号文章，《自由和美好的事物总是戛然而止：比如约翰 列侬和维基百科》（点击链接可以访问过去，做好他的公众号无所不谈的准备，虽然都挺有趣的）。
知乎讨论这个问题的500多个回答在昨天上午戛然而止，消失无踪。托马斯的这篇文字也不知道能生存到何时。互联网这片沃土在别的地方长出了很多参天大树，在中国却总像城市人行道水泥砖之间的野草，顽强地露头，被碾压而过；又螳臂挡车地冒头，再被碾压。周而复始。
在这些野草之中，我翻出了2010年时采访第一个中文维基百科词条创建者、“维基”这个译名的提出者的随笔。当他以及最早期的维基中文十三人确定这个译名并胼手砥足地一条一条建立起中文维基时，未必能看到这灰暗的未来。但他接受采访时的淡然和话语间隐隐透露出的理想主义，却正是这些年来激励人们前赴后继地传播光明的原动力。
这篇东西同样不知道能存活多久，所以本文开头我就放弃了关于本文的一切权利，希望尽量多的自媒体、网站和无处不在的SEO页能收录它、转发它，让人知道中文互联网世界一直燃烧不灭的微弱火种。即使不转发，也可以把它发到邮箱里，存到梯子通达的墙外，在隐秘的一个个圈子里流传。在历史无法书写之处，我们口口相传。仿佛华氏451那个时代，消防员以焚书为业；但热爱文字的人们仍然找到办法，他们分工合作，背下了每一本人类历史的名著；他们
 跟普通人没什么两样，像是跑完了一段长路，经过漫长的寻觅，见过美好的事物被焚毁，如今已垂垂老矣，聚在一起等待曲终人散，灯干油尽。他们并不肯定自己脑中所记载的一切，能使未来每一个日出发出更纯净的光辉，他们对此并无把握。但他们确知，那些书储存在他们平静的眼眸之后，完好无缺地等待着将来某一天，那些手指干净或肮脏的读者再来翻动。
 以下为原文。斜体字为今日所加。
那些改变中国互联网的小人物之一：维基百科命名者苑明理
2002年10月24日，苑明理（维基用户名 mountain）撰写了第一个具有中文内容的维基百科主页。
此前，或许有其他用户也曾想尝试，但当时的维基主页不支持中文输入。借由工具软件，mountain巧妙地绕过了这个障碍。维基媒体基金会发现了这个微小但意义深远的变化，三天后，中文维基百科有了自己的服务器、域名，同时，后台程序也升级为支持中文输入的版本。世界上最大的百科全书与使用人口最多的语言成功握手。作为中文维基百科的第一位参与用户，苑明理启动了这一进程。
在完成了第一篇中文条目“计算机科学”后，苑明理又提出了中文命名的提案。尽管已经有了中文内容，但这个百科全书的命名仍然用英文名字Wikipedia。 当时正在北大读应用数学研究生的苑明理引经据典，提出以“维基百科”作为Wikipedia的中文名称。苑明理向淼叔解释了当时的思路：“维”的本意是系物的大绳，由“纲举目张”转引到“网”的含义。而在此前，“万维网”作为WWW流传最广中文译名，已经认可了“维”与互联网的对应；“维基百科”，基于互联网的百科全书，这个译名成为Web2.0概念中音义俱佳的翻译，其流行程度仅次于“博客”（但后者并未得到普遍认同，现在仍有大量业者坚持称为“网志”）。一年之后的2003年10月，中文维基的13个管理员用户投票决定正式中文名，其中有9人选择了“维基百科”。在今天看来，这次投票的意义堪比埃尔隆德会议。
发布首个维基百科中文条目，以及命名维基百科，这两项里程碑式工作，完成任何一项都可以在IT史甚至学术史上留名；但苑明理并不认为这些有多么重要。 “我不做，总有人会做。当时国内已经有一些人在英文维基上学习了。至于命名，其实当时参与投票的其他译名也有很不错的”。很难说这是一种故作姿态的谦虚， 因为相比浩淼如海的维基百科，无论是参与者，还是使用者，都会为海量的知识目眩神迷。
Wikipedia 自2001年在美国建立以来，迄今已经拥有1200万个以上的条目，最大的英文维基拥有316万个条目（大英百科全书不到七万条）；中文维基自建立以来， 也已经拥有将近30万个条目。截至2007年10月，维基百科已经经历了四亿次编辑。相对地，维基的注册用户达1500万之众——要知道，维基百科的查阅甚至修改都无需注册。
在这些数据背后，是仍然不断汇聚而来的知识，更多的编辑者，更多的条目，更多次搜索。苑明理参与维基社区时，中文用户寥寥，条目也以编译英文条目为主。“维基”之译名，自提案而至表决，长达一年。倒并非是争论激烈，而是一开始人数太少，不好遽然而定。“中文维基属于所有中文用户，人数太少时定下名字，对其他人不是很不公平。”
苑明理坦承，维基所倡导的民主与自由，对其自身影响很大。维基的原则是每一个人均可参与编辑，人人平等；由于每一个人均可以编辑条目、增删内容，因此所有用户在维基面前平等。即使作为开创者和管理员，苑明理也并未享有太多的特权。管理员所作的，更多是维持编辑秩序，锁定或清理恶意编辑者。而对条目的修改，管理员与普通用户权限并无不同，都需要反复讨论、辨析，表明观点。这使维基的管理员远远不像一些论坛版主那样跋扈，所有参与者的讨论反映到条目上，也显得冷静而客观。
早期参与编辑维基的用户，素质都较为卓越。“我从他们身上学到了很多。”苑明理很怀念一位新加坡籍管理员，后者致力于中文维基社区规则的建立与完善。维基开放给所有用户编写，汇聚知识领域的微力量，带来的副作用可能是信息杂化，和编辑者之间的争吵。既然管理员不能以权威压人，此时便需要依规则调解。另有管理员引入“共识”的标准，成为解决条目争议的重要规则。
“早期中文维基的管理者贡献良多。”苑明理回忆。他们贡献的不止是中文条目，更在于及时将中文维基解决争端、协调众声的机制和规则建立起来。作为一个参与者几乎无限的项目，维基能够在高速增长的同时，仍维持条目令人惊奇的准确与中立，规则之完善与争端调解机制的建立，功不可没。
在飞速发展的同时，维基百科也并非没有遇到障碍。尽管拥有世界上最高超的调和艺术和顶尖人才，但维基仍然常常爆发“编辑战”，即各位编辑者就词条的表达与取舍进行的激烈论战。较为典型的是，伊朗现任总统内贾德的词条，从他还是一个默默无闻的候选人时就出现在百科页面上，随着他仕途的通达和不断发表的争议性言论，维基内部也一次次爆发论战。他的哪些言行需要载入页面，哪些判断适合进入百科，“每一个字上都展开了殊死搏斗”。
内贾德代表了世界上所有尖锐的冲突：东方主义下的东西方冲突，文明冲突论下的伊斯兰文明与基督教文明冲突，政治学意义下的学者与政客的冲突。反映到维基百科上，就是长达三年的争吵，三个调解员因此去职，单一个积极用户就作了近400次修改；最后完成的词条力争记录了内贾德的言论，却仍然被指责为“过长，但没有信息量”。筋疲力尽的维基人们告诉后来者：“可以重新开始讨论……可是我们已经没有精力再参与”（本段内容参考了南方都市报的相关报道）。
中文维基百科面临相似的困扰，据mountain回忆，有时他甚至声称要因此退出维基项目。与大部分争吵的原因不同，对内容的讨论主要围绕中立原则，只不 过各方对“中立”的理解不同。维基的词条就是在这样严格得近乎苛刻的审查中诞生，每一个词条看上去都冷淡，平静，客观，不带任何感情色彩和倾向。维基的编写是天下大同的缩写，呈现出来的结果却是万籁俱寂的白描。“维基最大的特点，就是在规则之下的众声喧哗，直到共识。”苑明理总结。
除了内容上的争论，中文维基还面临许多“特色国情”的挑战。作为百科全书，基本目的就是无所不包，除了“根据当地的法律法规不予显示”的内容。但是，当法律法规并未明确规定内容的界限时，无所不包就成为一种冒险的行为。中文维基百科自2005年后，访问上始终存在一些滞涩。有时一些页面会载入后无法显示，有 些时候则干脆整站无法访问。在这段时间，百度百科、互动百科等国产百科开始占领市场。
在注意力就是资源的互联网，苑明理对这种蚕食并不是太在意。“维基百科不会死，其他山寨版不尊重版权，随意拷贝媒体内容，没有真正创作和学习的乐趣，对维基百科不会形成真正威胁。”似乎是为了证明这一点，科普作家方舟子在博客上发文，痛斥国内某搜索引擎的在线百科不尊重版权，随意剽窃他文章的内容，还设置了繁琐的投诉程序。
“海纳百川，有容乃大”是中文维基百科的副标题，苑明理似乎从这句话中获得了更多从容的力量。“英文维基不会死，维基用户数量就有了保障。竞争再激烈，时间总会说明一切。坚持中立、包容和分享知识的乐趣，维基精神就不灭。”在关于维基你或许不知道的十件事这个条目下，最后一条就是“维基是一个百年大计”。既然能长寿到所有敌人都死去，那还有什么值得焦躁和忧愁呢？
“维基汇聚了所有普通人的力量，分享着所有用户的知识，并以此为基础记录人类文明的成果。”苑明理终于谈到了自己的理想：“这就是我想要的，世界公民。”
补记：苑明理已经于三年前离开了他服务多年的国际IT巨头。现在他在知春路的一家创业公司中埋头做一款叫做“彩云天气”的产品。除此之外，生活没有任何变化。</description>
    </item>
    
    <item>
      <title>洛谷题解 P1003 【铺地毯】</title>
      <link>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1003-%E9%93%BA%E5%9C%B0%E6%AF%AF/</link>
      <pubDate>Sat, 13 Apr 2019 09:50:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1003-%E9%93%BA%E5%9C%B0%E6%AF%AF/</guid>
      <description>说明 看标签 枚举，模拟，暴力。
很容易想到开一个大小N * N 的二维数组，然而数据范围是0 ≤ N ≤10,000
数组大小：10000 * 10000 = 100000000 Byte = 100000 KB = 100MB
刚好跨过了RE与MLE的红线。
另外一种方法是用四个数组来记录长方形的四个参数，再扫一遍检查最上面的地毯。
亲测，完美AC。
代码 #include&amp;lt;stdio.h&amp;gt; const int MAXN = 10000 + 5;//程序里出现幻数可不是好习惯哦~  int a[MAXN], b[MAXN], g[MAXN], k[MAXN]; int main() { int n, x, y; scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); for(int i = 0; i &amp;lt; n; i++) { scanf(&amp;#34;%d%d%d%d&amp;#34;, &amp;amp;a[i], &amp;amp;b[i], &amp;amp;g[i], &amp;amp;k[i]);//输入  } scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;x, &amp;amp;y); int ans = -1; for(int i = 0; i &amp;lt; n; i++) { if(x &amp;gt;= a[i] &amp;amp;&amp;amp; y &amp;gt;= b[i] &amp;amp;&amp;amp; x &amp;lt;= a[i] + g[i] &amp;amp;&amp;amp; y &amp;lt;= b[i] + k[i]) { ans = i + 1;//ans的最终值恰好是最上面的那张地毯编号  } } printf(&amp;#34;%d\n&amp;#34;, ans);//输出结果  return 0; } </description>
    </item>
    
    <item>
      <title>人类首张黑洞照片</title>
      <link>https://example.com/post/%E4%BA%BA%E7%B1%BB%E9%A6%96%E5%BC%A0%E9%BB%91%E6%B4%9E%E7%85%A7%E7%89%87/</link>
      <pubDate>Sat, 13 Apr 2019 09:39:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E4%BA%BA%E7%B1%BB%E9%A6%96%E5%BC%A0%E9%BB%91%E6%B4%9E%E7%85%A7%E7%89%87/</guid>
      <description>2019年4月10日9：00，人类首张对黑洞进行直接拍摄的照片发布。
这张照片可能并不符合许多人想象中常见的“漩涡”形象，但这是最符合目前学术界公认理论的形象。爱因斯坦，史瓦西，克尔，霍金等历代科学家的理论终于在这一天得到了论证，只不过他们都没有活到看到他们预言之物终于被光学设备记录到的那一天。
“黑洞”这个概念在20世纪就早已名扬四海，但这个概念一直只是存在于物理学家的计算中，这多少让人想起海王星，但海王星被计算出后几乎是立刻就被天文望远镜所发现，而黑洞从被计算出（1915年12月德国天文学家卡尔·史瓦西计算出爱因斯坦方程的黑洞解。）到2019年黑洞终于被人类的天文望远镜拍摄到，时隔整整103年。</description>
    </item>
    
    <item>
      <title>洛谷题解 P1002 【过河卒】</title>
      <link>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1002-%E8%BF%87%E6%B2%B3%E5%8D%92/</link>
      <pubDate>Fri, 12 Apr 2019 20:34:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1002-%E8%BF%87%E6%B2%B3%E5%8D%92/</guid>
      <description>题目描述 棋盘上$A$点有一个过河卒，需要走到目标$B$点。卒行走的规则：可以向下、或者向右。同时在棋盘上$C$点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。
棋盘用坐标表示，$A$点$(0, 0)$、$B$点$(n, m)$($n$, $m$为不超过$20$的整数)，同样马的位置坐标是需要给出的。
现在要求你计算出卒从$A$点能够到达$B$点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。
输入输出格式 输入格式： 一行四个数据，分别表示$B$点坐标和马的坐标。
输出格式： 一个数据，表示所有的路径条数。
输入输出样例 输入样例#1： 6 6 3 3
输出样例#1： 6
说明 结果可能很大！
 看到题目二话不说用了搜索，直到在提交前看了一下算法标签，又看了一下数据范围。。。
状态转移方程的推导并不复杂，每次判断卒是否能走到这个格子，不可以则为0（显而易见），可以则为下方与左方的值之和。
上代码，这道题算是一道DP入门题吧。
#include&amp;lt;stdio.h&amp;gt; const int MAXN = 20 + 5; const int attack[9][2] = {{0, 0}, {1, 2}, {2, 1}, {-1, 2}, {2, -1}, {1, -2}, {-2, 1}, {-1, -2}, {-2, -1}}; long long dist[MAXN][MAXN]; int map[MAXN][MAXN]; int n, m, x, y; void init(void) { for(int i = 0; i &amp;lt; 9; i++) { if(x + attack[i][0] &amp;lt;= n &amp;amp;&amp;amp; x + attack[i][0] &amp;gt;= 0) { if(y + attack[i][1] &amp;lt;= m &amp;amp;&amp;amp; y + attack[i][1] &amp;gt;= 0) { map[x + attack[i][0]][y + attack[i][1]] = true; } } } } int main() { scanf(&amp;#34;%d%d%d%d&amp;#34;, &amp;amp;n, &amp;amp;m, &amp;amp;x, &amp;amp;y); init(); int k = 1; for(int i = 0; i &amp;lt;= n; i++) { dist[i][0] = map[i][0] ?</description>
    </item>
    
    <item>
      <title>计算几何：凸包</title>
      <link>https://example.com/post/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%87%B8%E5%8C%85/</link>
      <pubDate>Fri, 05 Apr 2019 15:33:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%87%B8%E5%8C%85/</guid>
      <description>对于初学计算几何的OIer来说，Graham算法是个不错的凸包算法。Graham算法相比极角排序法来说，更为直观也更容易理解。
数据定义 class Point { public: double x, y; Point(double x = 0, double y = 0):x(x), y(y) {} Point(Point a, Point b) { //构造从a到b的向量  x = b.x - a.x; y = b.y - a.y; } double dist(const Point&amp;amp; p) const { //计算从自身到点P的距离  return sqrt((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y)); } double operator * (const Point&amp;amp; p) const { //计算向量叉积  return x * p.</description>
    </item>
    
    <item>
      <title>Splay学习笔记</title>
      <link>https://example.com/post/splay%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 28 Mar 2019 20:59:00 +0000</pubDate>
      
      <guid>https://example.com/post/splay%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>前言 伸展树（英语：Splay Tree）是一种能够自我平衡的二叉查找树，它能在均摊O(log n)的时间内完成基于伸展（Splay）操作的插入、查找、修改和删除操作。
众所周知，普通BST在进行各种操作时很容易因为左子树与右子树高度差的问题导致时间复杂度退化为O(n)，Splay为了避免这个问题，使用了一种叫做“伸展”的操作来使左右子树平衡，在后面会介绍。
定义 节点 node.v：节点node的值
node.father：节点node的父节点
node.ch[0]与node.ch[1]：节点node的左子节点与右子节点
node.size：以节点node为根节点的子树的节点总数
node.cnt：数值与节点node相同的节点的数量（都储存在节点node中）
代码：
class Node { public: int v, father, ch[2], size, cnt; Node(int v = 0, int father = 0, int size = 0, int cnt = 0):v(v), father(father), size(size), cnt(cnt) { ch[0] = ch[1] = 0; } }; 树 root：根节点
cnt：总结点数
Node node[MAXN]; int root = 0, cnt = 0; 操作 基本操作 pushup pushup()函数：更新节点p的size值
void pushup(int p) { node[p].</description>
    </item>
    
    <item>
      <title>一维数据结构学习笔记</title>
      <link>https://example.com/post/%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 15 Mar 2019 10:15:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>一维数据结构学习笔记 链表 链表:按顺序记录元素的线性数据结构。
其中的“顺序”是逻辑上的顺序，不一定是物理存储上的顺序。
链表分为单向与双向两种：
1.单向链表:每个元素只记录了下一个元素的位置。
2.双向链表:每个元素记录了上一个及下一个元素的位置。
代码实现：
//用类来定义链表中的每个元素。 class Node { public: int v = 0; Node * next = NULL, * prev = NULL; /*前一个元素或者后一个元素可以不存在，所以必须要使用指针类型。*/ Node(int v = 0, Node * next = NULL, Node * prev = NULL):v(v), next(next), prev(prev) {} }; 链表常用操作:构造链表 通过实例化链表类，创建链表的每个元素并建立元素之间的关系。
代码实现：
//构造一个只有头尾两个元素的链表。 Node* head = new Node(); Node* tail = new Node(); head -&amp;gt; next = tail; tile -&amp;gt; prev = head; 链表常用操作:遍历链表 将链表头赋值给临时变量，然后不断寻找下一个元素直到空。</description>
    </item>
    
    <item>
      <title>洛谷题解P1119【灾后重建】</title>
      <link>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3p1119%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA/</link>
      <pubDate>Sat, 09 Mar 2019 19:19:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3p1119%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA/</guid>
      <description>题目背景 $B$地区在地震过后，所有村庄都造成了一定的损毁，而这场地震却没对公路造成什么影响。但是在村庄重建好之前，所有与未重建完成的村庄的公路均无法通车。换句话说，只有连接着两个重建完成的村庄的公路才能通车，只能到达重建完成的村庄。
题目描述 给出$B$地区的村庄数$N$，村庄编号从$0$到$N-1$，和所有$M$条公路的长度，公路是双向的。并给出第$i$个村庄重建完成的时间$t_i$，你可以认为是同时开始重建并在第$t_i$天重建完成，并且在当天即可通车。若$t_i$为$0$则说明地震未对此地区造成损坏，一开始就可以通车。之后有$Q$个询问$(x, y, t)$，对于每个询问你要回答在第$t$天，从村庄$x$到村庄$y$的最短路径长度为多少。如果无法找到从$x$村庄到$y$村庄的路径，经过若干个已重建完成的村庄，或者村庄$x$或村庄$y$在第$t$天仍未重建完成 ，则需要返回$-1$。
输入输出格式 输入格式： 第一行包含两个正整数$N,M$，表示了村庄的数目与公路的数量。
第二行包含$N$个非负整数$t_0, t_1,…, t_{N-1}$​，表示了每个村庄重建完成的时间，数据保证了$t_0 ≤ t_1 ≤ … ≤ t_{N-1}​$。
接下来$M$行，每行$3$个非负整数$i, j, w$，$w$为不超过$10000$的正整数，表示了有一条连接村庄$i$与村庄$j$的道路，长度为$w$，保证$i≠j$，且对于任意一对村庄只会存在一条道路。
接下来一行也就是$M+3$行包含一个正整数$Q$，表示$Q$个询问。
接下来$Q$行，每行$3$个非负整数$x, y, t$，询问在第$t$天，从村庄$x$到村庄$y$的最短路径长度为多少，数据保证了$t$是不下降的。
输出格式： 共$Q$行，对每一个询问$(x, y, t)$输出对应的答案，即在第$t$天，从村庄$x$到村庄$y$的最短路径长度为多少。如果在第$t$天无法找到从$x$村庄到$y$村庄的路径，经过若干个已重建完成的村庄，或者村庄$x$或村庄$y$在第$t$天仍未修复完成，则输出$-1$。
输入输出样例 输入样例#1： 4 5 1 2 3 4 0 2 1 2 3 1 3 1 2 2 1 4 0 3 5 4 2 0 2 0 1 2 0 1 3 0 1 4
输出样例#1： -1 -1 5 4</description>
    </item>
    
    <item>
      <title>NOIP2018游记</title>
      <link>https://example.com/post/noip2018%E6%B8%B8%E8%AE%B0/</link>
      <pubDate>Fri, 08 Mar 2019 22:39:00 +0000</pubDate>
      
      <guid>https://example.com/post/noip2018%E6%B8%B8%E8%AE%B0/</guid>
      <description>出师 （1）
起床看见洛谷首页上显示的“距NOIP2018还有-1天”时，差点把嘴里的一口早饭喷了出来。
不过又想一下，要是一大早看见个“距NOIP2019还有365天”，估计瞬间会感觉压力山大。。。
(2)
进考场前竟然下起了倾盆大雨，从地铁站出来后，举着伞转了一个小时才找到考场，期间不停的被地图坑。
（我才不会告诉你浪费这么多时间的真正原因是使用迭代加深搜索找考场。）
进了考场发现有惊喜。。。机房竟然有网！有网！~~结果在考试前网断了。。。~~然后开始调整编辑器，以至于没注意到别人都开始打代码了。。。
第一题，水题，鉴定完毕。 分析：可能连模拟都算不上，直接从头到尾扫描一遍即可。
但虽说是水题，也有一些坑点：
  读入要用 string + cin + getline()!
读入要用 string + cin + getline()!
读入要用 string + cin + getline()!
重要的事情说三遍！
@垃圾一个 就是在这一点上炸了。
  判断时要自编函数或alnum，不能用ctype.h中的isprint()函数，要用isalnum()函数。
如果你问&amp;quot;isprint()函数是什么&amp;quot;或&amp;quot;isalnum()函数是什么&amp;quot;,请自行忽略这段话并自觉编写判断函数。
别问我为什么，Luogu自测只有20分。
  代码：
#include&amp;lt;iostream&amp;gt;#include&amp;lt;string&amp;gt;using namespace std; bool check(char c) { if(&amp;#39;0&amp;#39; &amp;lt;= c &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;9&amp;#39;) { return true; } if(&amp;#39;a&amp;#39; &amp;lt;= c &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;z&amp;#39;) { return true; } if(&amp;#39;A&amp;#39; &amp;lt;= c &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;Z&amp;#39;) { return true; } return false; } int main() { string s; getline(cin, s); int len = s.</description>
    </item>
    
    <item>
      <title>New Start</title>
      <link>https://example.com/post/new-start/</link>
      <pubDate>Mon, 04 Mar 2019 09:51:00 +0000</pubDate>
      
      <guid>https://example.com/post/new-start/</guid>
      <description>&lt;p&gt;折腾一番后终于把之前的文章迁移到GitHub Pages + Hexo的博客上了，之所以选择GitHub是因为这个平台忽然关闭的可能性很小，并且可定制性极强，虽然只能做静态网页，但搭个博客还是绰绰有余的。&lt;/p&gt;
&lt;p&gt;从另一方面来讲，GitHub的信誉也不错，在服务品质上也比国内的诸多流氓公司强得多。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.com/post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/post/</guid>
      <description>title: Telegram折腾记 abbrlink: 3581552066 tags:
 网络安全 网络 Telegram categories: 网络 date: 2020-08-05 22:32:00   出于一些众所周知的原因，一些即时通讯软件不能很好地满足我们的需求：
 QQ/WeChat，国产+闭源+黑历史，不存在的 WhatsApp/iMessages，闭源的商业软件，再加上某Prism，不存在的 Signal/Jabber，在国内比较小众，用户数量太少  Telegram是什么 以下内容摘自维基百科：
 Telegram是跨平台的即时通信软件，其客户端是自由及开放源代码软件，但服务器是专有软件。用户可以相互交换加密与自毁消息，发送照片、影片等所有类型文件。官方提供手机版（Android、iOS、Windows Phone）、桌面版（Windows、macOS、Linux）和网页版等多种平台客户端；同时官方开放应用程序接口（API），因此拥有许多第三方的客户端可供选择，其中多款内置中文。
 在墙越来越高的今天，许多软件都被证实并不可靠，前段时间升至爆出过腾讯一个数据方面的小主管就能调取聊天记录的新闻。于是乎，Sophon开始找在某些方面更优秀的IM（即时通讯）软件，然后就找到了Telegram。
Telegram有以下几个优势：
 完全免费，多平台不限制同步消息，比微信QQ之流不知高到哪里去了 跨平台，支持Windows，macOS，Linux，iOS，Android，和Web端 分享单个文件最大可达1.5G（更新后为2G） 客户端开源，放心 可以选择端到端加密并销毁数据 服务器端虽然储存平时聊天的记录，但Telegram骨头硬啊，俄罗斯政府曾经找Telegram要密钥，被Telegram一句话怼回去了，后来被逐出俄罗斯也不松口 Signal之类的软件或许比Telegram更安全，但是如果你注册了，你会惊喜得发现，没什么人用，最后放在硬盘里吃灰  Telegram的安装 Telegram当然可以直接从官网下载，但大多数人是访问不了Telegram官网的，所以就要另辟蹊跷：
 Telegram被托管在GitHub上，因此可以从GitHub上下载Telegram，具体来说是https://github.com/telegramdesktop/tdesktop/releases  但是，请注意，GitHub在国内是属于半被墙状态，因此可能要使用多线程下载器之类的“奇技淫巧”来克服困难了。
如果你是Apple用户并且又一个美区AppleID，恭喜你，你可以直接从App Store下载Telegram  当然，如果以上方案都不行，你还是老老实实用梯子吧，也不贵，有机场圈的朋友介绍的话就更简单了
Telegram的注册 因为Sophon酱在用macOS，所以暂时只有macOS的图例
首先在这里输入你的手机号码，然后你就会很惊喜的发现……
无法连接
原因不言而喻，毕竟由于墙的存在，这类软件基本不可能直接连接，用VPN等梯子就能简单的解决这个问题；
当然，如果您实在是没钱，Telegram还提供了另一个选项：使用公益MTProxy代理
（不用担心，代理服务器看不到你的聊天内容）
比较靠谱的代理频道有@onessr @socks5list 等
顺带一提，MTPProxy代理经常会被屏蔽，所以平时最好多准备几个订阅频道以及梯子
连接上之后可以订阅代理频道，获取长期可用的链接
当然有条件的话最好还是用自己的代理
第一次打开时是无法设置代理的，这时不要慌，直接正常输入自己的电话号码，然后会弹出要求你设置代理的提示，按要求填写就可以了。
注册成功后会要求你填写自己的姓名~~（当然不用填真名~~
Telegram的概念解释 毕竟 露西娅酱 毛子开发的软件，在很多操作习惯上都和国人有区别，具体说来如下：
Telegram的好友机制 国内的IM中，QQ，微信等都有“好友”的概念，但Telegram中没有。Telegram的概念是“联系人”，是单向的，即：你可以将对方加为你的联系人，但你不一定是对方的联系人。</description>
    </item>
    
  </channel>
</rss>
