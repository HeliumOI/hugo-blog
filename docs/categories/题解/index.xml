<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>题解 on Sophonの博客</title>
    <link>https://example.com/categories/%E9%A2%98%E8%A7%A3/</link>
    <description>Recent content in 题解 on Sophonの博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 02 Jan 2021 09:13:28 +0000</lastBuildDate><atom:link href="https://example.com/categories/%E9%A2%98%E8%A7%A3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「SCOI2009」windy 数</title>
      <link>https://example.com/post/scoi2009windy-%E6%95%B0/</link>
      <pubDate>Sat, 02 Jan 2021 09:13:28 +0000</pubDate>
      
      <guid>https://example.com/post/scoi2009windy-%E6%95%B0/</guid>
      <description>题意简述 不含前导零且相邻两个数字之差至少为 $2$ 的正整数被称为 windy 数。windy 想知道，在 $a$ 和 $b$ 之间，包括 $a$ 和 $b$ ，总共有多少个 windy 数？
题目分析 数位DP模板题
定义状态 $dp_{i, j}$ 为长度为 $i$ 的windy数中，最高位为 $j$ 的数的数目。
状态转移方程也很容易得到，可以直接从前一位转移过来：
$$dp_{i, j} = \sum dp_{i - 1, k} (|j - k| \geq 2)$$
主要的难点是在计算 $1$ 到 $n$ 之间的 windy 数，这可以分为几个步骤处理。
第一步，求出所有长度小于等于 $len - 1$ （$len$ 为 $n$ 的长度）的，以 $1$ ~ $9$ 为最高位的 windy 数的总数。
第二步，求出所有长度为 $len$，最高位小于 $n$ 的最高位的 windy 数的总数。
第三步，求出所有长度为 $len$，最高位等于 $n$ 的最高位的 windy 数的总数。这一步是最难想的，需要从第二位开始，依次枚举每一位，并累加所有以与上一位的差小于 $2$ 的数为最高位的 windy 数的总数。（前几位之前已经补足。）</description>
    </item>
    
    <item>
      <title>题解「CF1200E」Compress Words</title>
      <link>https://example.com/post/%E9%A2%98%E8%A7%A3cf1200ecompress-words/</link>
      <pubDate>Fri, 01 Jan 2021 23:53:05 +0000</pubDate>
      
      <guid>https://example.com/post/%E9%A2%98%E8%A7%A3cf1200ecompress-words/</guid>
      <description>题意简述   给定 $n$ 个单词，将这 $n$ 个单词从前往后拼接在一起，若相邻两个单词的后缀和前缀相同则将其重合在一起。
  如输入 sample please ease in out，sample 与 please 拼接得 samplease，samplease 与 ease 拼接仍得 samplease，最终得 sampleaseinout
  题目分析 题目的关键在于求出两个字符串之间的最长公共部分，即相等的前缀与后缀。这很容易让人联想到 KMP 的 $next$ 数组，它的定义是一个字符串的前缀的最长的相同的前缀与后缀的长度，$next[len - 1]$ 的定义就是这个字符串的最长的相同的前缀与后缀的长度。
因此，对于字符串 $s1$ 和 $s2$，我们只需要将 $s2$ 拼接在 $s1$ 前面，例如将 sample 与 please 拼接为 pleasesample，再求出这个字符串的 $next[len - 1]$ 等于 $2$，就可以简单地得到公共部分为 ple，再从 $2$ 开始截取 please 的后半部分 ease 拼接到 sample 后面即可。
对于 $n$ 个字符串，则应该按照上面的方法依次拼接。
P.S. 一个优化：因为两个字符串之间的最长公共部分的长度显然不可能大于其中任意一个字符串的长度，所以在一开始拼接时，只需要求出两个字符串中较短的的长度 $l$，将第一个字符串的后 $l$ 个字符拼接到第二个字符串后面，再求 $next[len - 1]$ 的值。</description>
    </item>
    
    <item>
      <title>题解「CF161D」Distance in Tree</title>
      <link>https://example.com/post/%E9%A2%98%E8%A7%A3cf161ddistance-in-tree/</link>
      <pubDate>Fri, 01 Jan 2021 20:01:39 +0000</pubDate>
      
      <guid>https://example.com/post/%E9%A2%98%E8%A7%A3cf161ddistance-in-tree/</guid>
      <description>题意简述 给定一颗$N$个节点的树，求树上长度为$K$的路径的数量
输入 第一行两个数字$N$，$K$，如题意
接下来的$N−1$行中，每行两个整数$u,v$表示一条树边$(u,v)$
输出 一个整数$ans$，如题意
数据范围 $1 \leq N \leq 50000$
$1 \leq K \leq 500$
题目分析 虽然此题可以看出是个点分治模板，但由于$K$的范围较小（小于等于$500$），所以树形DP也可以解决这道题
定义状态$f_{u,i}$为从$u$开始的路径中长度为$i$的路径的数量，可以很容易得出状态转移方程
$$f_{u, i} = \sum_{v \in son_u} f_{v, i - 1}$$
回到题目本身，题目中要求我们找出所有长度为$K$的路径
以$u$为根节点考虑，可以将所有的路径分为两种：经过点$u$的和不经过点$u$的
对于后者，可以直接递归处理；对于前者，我们可以以点$u$将其分为两条路径，两条路径的长度和为$K$。所以，根据乘法原理，我们只需累加f[v][i] * f[u][k - i - 1]即可。
另外，累加答案必须在更新$f_{u, i}$之前，因为在更新之前，$f_{u, i}$是从点$u$开始，不经过点$v$的长度为$i$的路径数量，乘以$f_{u, K - i - 1}$就可以得到经过$u, v$的长度为$K$的路径数量。但如果先更新$f_{u, i}$，则$f_{u, i}$是从点$u$开始，经过点$v$和其他子节点的长度为$i$的路径数量，会出现重复：即一条路径从$v$走到$u$，又走回$v$的“重复”现象
代码 #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; const int MAXN = 50000 + 5; const int MAXK = 500 + 5; vector&amp;lt;int&amp;gt; G[MAXN]; int f[MAXN][MAXK]; int n, k; long long ans; void dp(int u, int par) { f[u][0] = 1; for(int i = 0; i &amp;lt; G[u].</description>
    </item>
    
    <item>
      <title>【TJOI2013】单词-题解</title>
      <link>https://example.com/post/tjoi2013%E5%8D%95%E8%AF%8D-%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Fri, 01 Jan 2021 13:08:24 +0000</pubDate>
      
      <guid>https://example.com/post/tjoi2013%E5%8D%95%E8%AF%8D-%E9%A2%98%E8%A7%A3/</guid>
      <description>题意简述 给出$n$个单词，统计每个单词在全体单词（包括自身）中的出现次数
题目分析 对多个模式串进行匹配，求每个模式串的出现次数，显然是AC自动机模版题
本题与模版的区别在于，本题中单词可能会有重复，因此要用一个$cnt$数组记录$Trie$树上每个节点被覆盖了几次，再用一个$vis$数组记录当前节点是否已经被累加过了
如果当前节点$i$还没有被累加过（$vis_i = false$），就将它往上能跳到的节点都加上$cnt_i$，扫完后再将$vis_i$变为$true$
代码 #include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; const int MAXN = 1000000 + 5; const int MAXM = 200 + 5; string s[MAXM]; bool vis[MAXN]; int t[MAXN][26], sum[MAXN], cnt[MAXN], ed[MAXN], ans[MAXN]; int fail[MAXN]; int tot; int insert(string&amp;amp; s) { int p = 0; for(int i = 0; i &amp;lt; s.length(); i++) { if(t[p][s[i] - &amp;#39;a&amp;#39;] == 0) { t[p][s[i] - &amp;#39;a&amp;#39;] = ++tot; } p = t[p][s[i] - &amp;#39;a&amp;#39;]; cnt[p]++; } return p; } void getFail() { queue&amp;lt;int&amp;gt; q; for(int i = 0; i &amp;lt; 26; i++) { if(t[0][i]) { q.</description>
    </item>
    
    <item>
      <title>题解P3197 [HNOI2008]越狱</title>
      <link>https://example.com/post/%E9%A2%98%E8%A7%A3p3197-hnoi2008%E8%B6%8A%E7%8B%B1/</link>
      <pubDate>Fri, 14 Feb 2020 17:16:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E9%A2%98%E8%A7%A3p3197-hnoi2008%E8%B6%8A%E7%8B%B1/</guid>
      <description>思路 这道题可以从反面去考虑，即：先计算出不可能发生越狱的状态总数，并用它减去总状态数即为这道题要求的答案。
首先，在不失一般性的情况下，不妨设第一个房间里的犯人的宗教信仰为$p$，则第二个房间里的烦人的宗教信仰不能为$p$，因此第二个房间里的犯人的宗教信仰共有$(m - 1)$种可能性。同理，第三个房间里的犯人的宗教信仰也共有$(m - 1)$种可能性……故第二个到第$n$个房间里的烦人的宗教信仰共有$(n - 1)^{(m - 1)}$种可能性。而第一个房间里的犯人的信仰有$n$种可能，故不可能发生越狱的状态总数为 $$n×(n - 1)^{(m - 1)}$$
那么，总状态数是多少呢？容易求的总状态数为$n^m$，所以题目所求为 $$n^m-n×(n - 1)^{(m - 1)}$$
这道题还有一个要注意的地方：$m$最大为$10^8$，因此要用快速幂来计算
AC代码：
#include&amp;lt;iostream&amp;gt;using namespace std; const long long MOD = 100003; long long power(long long b, long long p) { if(p == 0) { return 1; } long long ans = power(b, p / 2); ans = ans * ans % MOD; if(p % 2 == 1) { ans = ans * b % MOD; } return ans; } int main() { long long m, n; cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; n; long long ans = ((power(m, n) - m * power(m - 1, n - 1)) % MOD + MOD) % MOD; cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl; return 0; } </description>
    </item>
    
    <item>
      <title>题解 SP196 【MUSKET - Musketeers】</title>
      <link>https://example.com/post/%E9%A2%98%E8%A7%A3-sp196-musket-musketeers/</link>
      <pubDate>Mon, 29 Jul 2019 11:42:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E9%A2%98%E8%A7%A3-sp196-musket-musketeers/</guid>
      <description>在模拟赛中遇到了这道题。（后来才知道是SPOJ上的原题）
话不多说，开始动态规划三步走。$Let&amp;rsquo;s\ go!$
定义状态 假设第1个人能够赢得整场决斗：
倘若把这位仁兄复制一份，放在$n + 1$的；那么，在一阵厮杀后，他和自己的分身应当能够相遇。那么，我们就和 在[NOI1995]石子合并中一样，将数组翻倍后再处理。
显而易见定义状态如下：
$dp_{i,j}$为第$i$人与第$j$人是否能够相遇
状态转移方程 现在思考一下：第$i$人与第$j$人是否能够相遇？
按照区间DP的思维，我们在$i$与$j$之间选取一个人$k$
若$i$与$k$能相遇，$k$与$j$能相遇，且$i$与$j$当中的任何一个人能干掉$k$
故状态转移方程为：
$$dp_{i,j} = dp_{i,k} &amp;amp;&amp;amp;\ dp_{k,j} &amp;amp;&amp;amp;\ (w_{i,k} || w_{j,k})$$
边界条件 显然， 若两人本来就相邻，则$dp_{i,j} = 1$
代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstring&amp;gt;using namespace std; const int MAXN = 100 * 2 + 5; int w[MAXN][MAXN], f[MAXN][MAXN]; int n; int main() { int t; cin &amp;gt;&amp;gt; t; while(t--) { memset(f, 0, sizeof(f)); //数组清零，我在这里掉了两次坑  memset(w, 0, sizeof(w)); cin &amp;gt;&amp;gt; n; for(int i = 1; i &amp;lt;= n; i++) { for(int j = 1; j &amp;lt;= n; j++) { char c; cin &amp;gt;&amp;gt; c; w[i][j] = c - &amp;#39;0&amp;#39;; w[i + n][j + n] = w[i + n][j] = w[i][j + n] = w[i][j]; } } for(int l = 1; l &amp;lt;= n + 1; l++) { for(int i = 1; i + l - 1 &amp;lt;= n * 2; i++) { int j = i + l - 1; if(l &amp;lt;= 2) { f[i][j] = 1; //边界条件  continue; } for(int k = i; k &amp;lt;= j; k++) { if(f[i][k] &amp;amp;&amp;amp; f[k][j] &amp;amp;&amp;amp; (w[i][k] || w[j][k])) { f[i][j] = 1; break; } } } } int ans = 0; for(int i = 1; i &amp;lt;= n; i++) { if(f[i][i + n]) { ans++; } } cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl; for(int i = 1; i &amp;lt;= n; i++) { if(f[i][i + n]) { cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl; } } } return 0; } </description>
    </item>
    
    <item>
      <title>洛谷题解 P1226 【【模板】快速幂||取余运算】</title>
      <link>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1226-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E4%BD%99%E8%BF%90%E7%AE%97/</link>
      <pubDate>Tue, 30 Apr 2019 15:04:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1226-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E4%BD%99%E8%BF%90%E7%AE%97/</guid>
      <description>题目描述 洛谷P1226
说明 看到题解里貌似并没有Python的题解，我来发一个，共两行。
众所周知，为什么有时候洛谷er们要用Python呢？因为Python里已经包装了很多算法，用在OI中基本上等于打游戏时开外挂。虽然
对于这道题，Python 3中有一个数学函数pow()，它在help()函数中的说明是这样的：
pow(x, y, z=None, /) Equivalent to x**y (with two arguments) or x**y % z (with three arguments) Some types, such as ints, are able to use a more efficient algorithm when invoked using the three argument form. x**y % z，这正好就是这道题所用到的算法，所以直接调用pow(b, p, k)就OK了。一般来说，编程语言本身的库函数都会往死里优化，基本上不用担心时间复杂度的问题。（除了某些特别坑的）
最后要注意的一点就是，很多人提交Python都莫名RE，原因是Python 3的input()函数返回的是字符串，必须用int()转换为整数。如果一行有多个数字，则调用split()方法分割成多个字符串。
上代码：
a = input().split() print(a[0] + &amp;#39;^&amp;#39; + a[1] + &amp;#39; mod &amp;#39; + a[2] + &amp;#39;=&amp;#39; + str(pow(int(a[0]), int(a[1]), int(a[2])))) </description>
    </item>
    
    <item>
      <title>洛谷题解 P1003 【铺地毯】</title>
      <link>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1003-%E9%93%BA%E5%9C%B0%E6%AF%AF/</link>
      <pubDate>Sat, 13 Apr 2019 09:50:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1003-%E9%93%BA%E5%9C%B0%E6%AF%AF/</guid>
      <description>说明 看标签 枚举，模拟，暴力。
很容易想到开一个大小N * N 的二维数组，然而数据范围是0 ≤ N ≤10,000
数组大小：10000 * 10000 = 100000000 Byte = 100000 KB = 100MB
刚好跨过了RE与MLE的红线。
另外一种方法是用四个数组来记录长方形的四个参数，再扫一遍检查最上面的地毯。
亲测，完美AC。
代码 #include&amp;lt;stdio.h&amp;gt; const int MAXN = 10000 + 5;//程序里出现幻数可不是好习惯哦~  int a[MAXN], b[MAXN], g[MAXN], k[MAXN]; int main() { int n, x, y; scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); for(int i = 0; i &amp;lt; n; i++) { scanf(&amp;#34;%d%d%d%d&amp;#34;, &amp;amp;a[i], &amp;amp;b[i], &amp;amp;g[i], &amp;amp;k[i]);//输入  } scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;x, &amp;amp;y); int ans = -1; for(int i = 0; i &amp;lt; n; i++) { if(x &amp;gt;= a[i] &amp;amp;&amp;amp; y &amp;gt;= b[i] &amp;amp;&amp;amp; x &amp;lt;= a[i] + g[i] &amp;amp;&amp;amp; y &amp;lt;= b[i] + k[i]) { ans = i + 1;//ans的最终值恰好是最上面的那张地毯编号  } } printf(&amp;#34;%d\n&amp;#34;, ans);//输出结果  return 0; } </description>
    </item>
    
    <item>
      <title>洛谷题解 P1002 【过河卒】</title>
      <link>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1002-%E8%BF%87%E6%B2%B3%E5%8D%92/</link>
      <pubDate>Fri, 12 Apr 2019 20:34:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1002-%E8%BF%87%E6%B2%B3%E5%8D%92/</guid>
      <description>题目描述 棋盘上$A$点有一个过河卒，需要走到目标$B$点。卒行走的规则：可以向下、或者向右。同时在棋盘上$C$点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。
棋盘用坐标表示，$A$点$(0, 0)$、$B$点$(n, m)$($n$, $m$为不超过$20$的整数)，同样马的位置坐标是需要给出的。
现在要求你计算出卒从$A$点能够到达$B$点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。
输入输出格式 输入格式： 一行四个数据，分别表示$B$点坐标和马的坐标。
输出格式： 一个数据，表示所有的路径条数。
输入输出样例 输入样例#1： 6 6 3 3
输出样例#1： 6
说明 结果可能很大！
 看到题目二话不说用了搜索，直到在提交前看了一下算法标签，又看了一下数据范围。。。
状态转移方程的推导并不复杂，每次判断卒是否能走到这个格子，不可以则为0（显而易见），可以则为下方与左方的值之和。
上代码，这道题算是一道DP入门题吧。
#include&amp;lt;stdio.h&amp;gt; const int MAXN = 20 + 5; const int attack[9][2] = {{0, 0}, {1, 2}, {2, 1}, {-1, 2}, {2, -1}, {1, -2}, {-2, 1}, {-1, -2}, {-2, -1}}; long long dist[MAXN][MAXN]; int map[MAXN][MAXN]; int n, m, x, y; void init(void) { for(int i = 0; i &amp;lt; 9; i++) { if(x + attack[i][0] &amp;lt;= n &amp;amp;&amp;amp; x + attack[i][0] &amp;gt;= 0) { if(y + attack[i][1] &amp;lt;= m &amp;amp;&amp;amp; y + attack[i][1] &amp;gt;= 0) { map[x + attack[i][0]][y + attack[i][1]] = true; } } } } int main() { scanf(&amp;#34;%d%d%d%d&amp;#34;, &amp;amp;n, &amp;amp;m, &amp;amp;x, &amp;amp;y); init(); int k = 1; for(int i = 0; i &amp;lt;= n; i++) { dist[i][0] = map[i][0] ?</description>
    </item>
    
    <item>
      <title>洛谷题解P1119【灾后重建】</title>
      <link>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3p1119%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA/</link>
      <pubDate>Sat, 09 Mar 2019 19:19:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3p1119%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA/</guid>
      <description>题目背景 $B$地区在地震过后，所有村庄都造成了一定的损毁，而这场地震却没对公路造成什么影响。但是在村庄重建好之前，所有与未重建完成的村庄的公路均无法通车。换句话说，只有连接着两个重建完成的村庄的公路才能通车，只能到达重建完成的村庄。
题目描述 给出$B$地区的村庄数$N$，村庄编号从$0$到$N-1$，和所有$M$条公路的长度，公路是双向的。并给出第$i$个村庄重建完成的时间$t_i$，你可以认为是同时开始重建并在第$t_i$天重建完成，并且在当天即可通车。若$t_i$为$0$则说明地震未对此地区造成损坏，一开始就可以通车。之后有$Q$个询问$(x, y, t)$，对于每个询问你要回答在第$t$天，从村庄$x$到村庄$y$的最短路径长度为多少。如果无法找到从$x$村庄到$y$村庄的路径，经过若干个已重建完成的村庄，或者村庄$x$或村庄$y$在第$t$天仍未重建完成 ，则需要返回$-1$。
输入输出格式 输入格式： 第一行包含两个正整数$N,M$，表示了村庄的数目与公路的数量。
第二行包含$N$个非负整数$t_0, t_1,…, t_{N-1}$​，表示了每个村庄重建完成的时间，数据保证了$t_0 ≤ t_1 ≤ … ≤ t_{N-1}​$。
接下来$M$行，每行$3$个非负整数$i, j, w$，$w$为不超过$10000$的正整数，表示了有一条连接村庄$i$与村庄$j$的道路，长度为$w$，保证$i≠j$，且对于任意一对村庄只会存在一条道路。
接下来一行也就是$M+3$行包含一个正整数$Q$，表示$Q$个询问。
接下来$Q$行，每行$3$个非负整数$x, y, t$，询问在第$t$天，从村庄$x$到村庄$y$的最短路径长度为多少，数据保证了$t$是不下降的。
输出格式： 共$Q$行，对每一个询问$(x, y, t)$输出对应的答案，即在第$t$天，从村庄$x$到村庄$y$的最短路径长度为多少。如果在第$t$天无法找到从$x$村庄到$y$村庄的路径，经过若干个已重建完成的村庄，或者村庄$x$或村庄$y$在第$t$天仍未修复完成，则输出$-1$。
输入输出样例 输入样例#1： 4 5 1 2 3 4 0 2 1 2 3 1 3 1 2 2 1 4 0 3 5 4 2 0 2 0 1 2 0 1 3 0 1 4
输出样例#1： -1 -1 5 4</description>
    </item>
    
  </channel>
</rss>
