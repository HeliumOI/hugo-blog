<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记 on Sophonの博客</title>
    <link>https://blog.sophonci117.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 学习笔记 on Sophonの博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 01 Jan 2021 00:24:39 +0000</lastBuildDate><atom:link href="https://blog.sophonci117.me/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AC自动机学习笔记</title>
      <link>https://blog.sophonci117.me/post/ac%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 01 Jan 2021 00:24:39 +0000</pubDate>
      
      <guid>https://blog.sophonci117.me/post/ac%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>再不更新这里都长草了
前置知识  KMP Trie树  前言 AC自动机是一个字符串匹配算法，与KMP的区别在于，AC自动机可以用$O(\sum |s_i| + |S|)$的复杂度在文本串中同时查找多个模式串，例如这道题
对于初学者 就是我 而言，可以简单地将AC自动机理解为KMP + Trie树，整个算法分为三步：
 将所有的模式串建成一颗Trie树 求出Trie树上每一个节点的失配指针（fail）（类似KMP的next） 将文本串在Trie树上进行匹配  算法过程 建立Trie 这一步和普通的字典树一样，不解释
void insert(string&amp;amp; s) { int p = 0; for(int i = 0; i &amp;lt; s.length(); i++) { if(t[p][s[i] - &amp;#39;a&amp;#39;] == 0) { t[p][s[i] - &amp;#39;a&amp;#39;] = ++tot; } p = t[p][s[i] - &amp;#39;a&amp;#39;]; } num[p]++; } 求失配指针 $fail_u$的定义为，Tire树内所有字符串的所有前缀中，后缀匹配长度最大的的位置；如下图中，$fail_i = j$
（图中不同颜色的边代表字符）
如图，节点$i$与节点$j$的后缀匹配最长，所以$fail_i = j$
如图，$fail_i = j$，则$i$的粉色子节点（此处用颜色表示字符）必然也与$j$的粉色子节点有最长的后缀，因此该子节点的$fail$指针就是$k$</description>
    </item>
    
    <item>
      <title>计算几何：凸包</title>
      <link>https://blog.sophonci117.me/post/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%87%B8%E5%8C%85/</link>
      <pubDate>Fri, 05 Apr 2019 15:33:00 +0000</pubDate>
      
      <guid>https://blog.sophonci117.me/post/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%87%B8%E5%8C%85/</guid>
      <description>对于初学计算几何的OIer来说，Graham算法是个不错的凸包算法。Graham算法相比极角排序法来说，更为直观也更容易理解。
数据定义 class Point { public: double x, y; Point(double x = 0, double y = 0):x(x), y(y) {} Point(Point a, Point b) { //构造从a到b的向量  x = b.x - a.x; y = b.y - a.y; } double dist(const Point&amp;amp; p) const { //计算从自身到点P的距离  return sqrt((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y)); } double operator * (const Point&amp;amp; p) const { //计算向量叉积  return x * p.</description>
    </item>
    
    <item>
      <title>Splay学习笔记</title>
      <link>https://blog.sophonci117.me/post/splay%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 28 Mar 2019 20:59:00 +0000</pubDate>
      
      <guid>https://blog.sophonci117.me/post/splay%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>前言 伸展树（英语：Splay Tree）是一种能够自我平衡的二叉查找树，它能在均摊O(log n)的时间内完成基于伸展（Splay）操作的插入、查找、修改和删除操作。
众所周知，普通BST在进行各种操作时很容易因为左子树与右子树高度差的问题导致时间复杂度退化为O(n)，Splay为了避免这个问题，使用了一种叫做“伸展”的操作来使左右子树平衡，在后面会介绍。
定义 节点 node.v：节点node的值
node.father：节点node的父节点
node.ch[0]与node.ch[1]：节点node的左子节点与右子节点
node.size：以节点node为根节点的子树的节点总数
node.cnt：数值与节点node相同的节点的数量（都储存在节点node中）
代码：
class Node { public: int v, father, ch[2], size, cnt; Node(int v = 0, int father = 0, int size = 0, int cnt = 0):v(v), father(father), size(size), cnt(cnt) { ch[0] = ch[1] = 0; } }; 树 root：根节点
cnt：总结点数
Node node[MAXN]; int root = 0, cnt = 0; 操作 基本操作 pushup pushup()函数：更新节点p的size值
void pushup(int p) { node[p].</description>
    </item>
    
    <item>
      <title>一维数据结构学习笔记</title>
      <link>https://blog.sophonci117.me/post/%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 15 Mar 2019 10:15:00 +0000</pubDate>
      
      <guid>https://blog.sophonci117.me/post/%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>一维数据结构学习笔记 链表 链表:按顺序记录元素的线性数据结构。
其中的“顺序”是逻辑上的顺序，不一定是物理存储上的顺序。
链表分为单向与双向两种：
1.单向链表:每个元素只记录了下一个元素的位置。
2.双向链表:每个元素记录了上一个及下一个元素的位置。
代码实现：
//用类来定义链表中的每个元素。 class Node { public: int v = 0; Node * next = NULL, * prev = NULL; /*前一个元素或者后一个元素可以不存在，所以必须要使用指针类型。*/ Node(int v = 0, Node * next = NULL, Node * prev = NULL):v(v), next(next), prev(prev) {} }; 链表常用操作:构造链表 通过实例化链表类，创建链表的每个元素并建立元素之间的关系。
代码实现：
//构造一个只有头尾两个元素的链表。 Node* head = new Node(); Node* tail = new Node(); head -&amp;gt; next = tail; tile -&amp;gt; prev = head; 链表常用操作:遍历链表 将链表头赋值给临时变量，然后不断寻找下一个元素直到空。</description>
    </item>
    
  </channel>
</rss>
