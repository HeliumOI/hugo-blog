<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on Sophonの博客</title>
    <link>https://blog.sophonci117.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on Sophonの博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 28 Mar 2019 20:59:00 +0000</lastBuildDate><atom:link href="https://blog.sophonci117.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Splay学习笔记</title>
      <link>https://blog.sophonci117.me/post/splay%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 28 Mar 2019 20:59:00 +0000</pubDate>
      
      <guid>https://blog.sophonci117.me/post/splay%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>前言 伸展树（英语：Splay Tree）是一种能够自我平衡的二叉查找树，它能在均摊O(log n)的时间内完成基于伸展（Splay）操作的插入、查找、修改和删除操作。
众所周知，普通BST在进行各种操作时很容易因为左子树与右子树高度差的问题导致时间复杂度退化为O(n)，Splay为了避免这个问题，使用了一种叫做“伸展”的操作来使左右子树平衡，在后面会介绍。
定义 节点 node.v：节点node的值
node.father：节点node的父节点
node.ch[0]与node.ch[1]：节点node的左子节点与右子节点
node.size：以节点node为根节点的子树的节点总数
node.cnt：数值与节点node相同的节点的数量（都储存在节点node中）
代码：
class Node { public: int v, father, ch[2], size, cnt; Node(int v = 0, int father = 0, int size = 0, int cnt = 0):v(v), father(father), size(size), cnt(cnt) { ch[0] = ch[1] = 0; } }; 树 root：根节点
cnt：总结点数
Node node[MAXN]; int root = 0, cnt = 0; 操作 基本操作 pushup pushup()函数：更新节点p的size值
void pushup(int p) { node[p].</description>
    </item>
    
    <item>
      <title>一维数据结构学习笔记</title>
      <link>https://blog.sophonci117.me/post/%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 15 Mar 2019 10:15:00 +0000</pubDate>
      
      <guid>https://blog.sophonci117.me/post/%E4%B8%80%E7%BB%B4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>一维数据结构学习笔记 链表 链表:按顺序记录元素的线性数据结构。
其中的“顺序”是逻辑上的顺序，不一定是物理存储上的顺序。
链表分为单向与双向两种：
1.单向链表:每个元素只记录了下一个元素的位置。
2.双向链表:每个元素记录了上一个及下一个元素的位置。
代码实现：
//用类来定义链表中的每个元素。 class Node { public: int v = 0; Node * next = NULL, * prev = NULL; /*前一个元素或者后一个元素可以不存在，所以必须要使用指针类型。*/ Node(int v = 0, Node * next = NULL, Node * prev = NULL):v(v), next(next), prev(prev) {} }; 链表常用操作:构造链表 通过实例化链表类，创建链表的每个元素并建立元素之间的关系。
代码实现：
//构造一个只有头尾两个元素的链表。 Node* head = new Node(); Node* tail = new Node(); head -&amp;gt; next = tail; tile -&amp;gt; prev = head; 链表常用操作:遍历链表 将链表头赋值给临时变量，然后不断寻找下一个元素直到空。</description>
    </item>
    
  </channel>
</rss>
