<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>快速幂 on Sophonの博客</title>
    <link>https://example.com/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
    <description>Recent content in 快速幂 on Sophonの博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 14 Feb 2020 17:16:00 +0000</lastBuildDate><atom:link href="https://example.com/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>题解P3197 [HNOI2008]越狱</title>
      <link>https://example.com/post/%E9%A2%98%E8%A7%A3p3197-hnoi2008%E8%B6%8A%E7%8B%B1/</link>
      <pubDate>Fri, 14 Feb 2020 17:16:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E9%A2%98%E8%A7%A3p3197-hnoi2008%E8%B6%8A%E7%8B%B1/</guid>
      <description>思路 这道题可以从反面去考虑，即：先计算出不可能发生越狱的状态总数，并用它减去总状态数即为这道题要求的答案。
首先，在不失一般性的情况下，不妨设第一个房间里的犯人的宗教信仰为$p$，则第二个房间里的烦人的宗教信仰不能为$p$，因此第二个房间里的犯人的宗教信仰共有$(m - 1)$种可能性。同理，第三个房间里的犯人的宗教信仰也共有$(m - 1)$种可能性……故第二个到第$n$个房间里的烦人的宗教信仰共有$(n - 1)^{(m - 1)}$种可能性。而第一个房间里的犯人的信仰有$n$种可能，故不可能发生越狱的状态总数为 $$n×(n - 1)^{(m - 1)}$$
那么，总状态数是多少呢？容易求的总状态数为$n^m$，所以题目所求为 $$n^m-n×(n - 1)^{(m - 1)}$$
这道题还有一个要注意的地方：$m$最大为$10^8$，因此要用快速幂来计算
AC代码：
#include&amp;lt;iostream&amp;gt;using namespace std; const long long MOD = 100003; long long power(long long b, long long p) { if(p == 0) { return 1; } long long ans = power(b, p / 2); ans = ans * ans % MOD; if(p % 2 == 1) { ans = ans * b % MOD; } return ans; } int main() { long long m, n; cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; n; long long ans = ((power(m, n) - m * power(m - 1, n - 1)) % MOD + MOD) % MOD; cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl; return 0; } </description>
    </item>
    
    <item>
      <title>洛谷题解 P1226 【【模板】快速幂||取余运算】</title>
      <link>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1226-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E4%BD%99%E8%BF%90%E7%AE%97/</link>
      <pubDate>Tue, 30 Apr 2019 15:04:00 +0000</pubDate>
      
      <guid>https://example.com/post/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-p1226-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%96%E4%BD%99%E8%BF%90%E7%AE%97/</guid>
      <description>题目描述 洛谷P1226
说明 看到题解里貌似并没有Python的题解，我来发一个，共两行。
众所周知，为什么有时候洛谷er们要用Python呢？因为Python里已经包装了很多算法，用在OI中基本上等于打游戏时开外挂。虽然
对于这道题，Python 3中有一个数学函数pow()，它在help()函数中的说明是这样的：
pow(x, y, z=None, /) Equivalent to x**y (with two arguments) or x**y % z (with three arguments) Some types, such as ints, are able to use a more efficient algorithm when invoked using the three argument form. x**y % z，这正好就是这道题所用到的算法，所以直接调用pow(b, p, k)就OK了。一般来说，编程语言本身的库函数都会往死里优化，基本上不用担心时间复杂度的问题。（除了某些特别坑的）
最后要注意的一点就是，很多人提交Python都莫名RE，原因是Python 3的input()函数返回的是字符串，必须用int()转换为整数。如果一行有多个数字，则调用split()方法分割成多个字符串。
上代码：
a = input().split() print(a[0] + &amp;#39;^&amp;#39; + a[1] + &amp;#39; mod &amp;#39; + a[2] + &amp;#39;=&amp;#39; + str(pow(int(a[0]), int(a[1]), int(a[2])))) </description>
    </item>
    
  </channel>
</rss>
